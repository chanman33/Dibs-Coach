# Project Implementation Rules
version: 1.0

# Core Configuration
core:
  directories:
    lib: "Core API configurations & base implementations"
    app/api: "API routes & endpoints"
    utils: "Helpers, types, & server actions"
    components: "UI components & client-side logic"
  
  env_vars:
    server_side: "direct process.env access"
    client_side: "NEXT_PUBLIC_ prefix required"
    validation: "type-safe with runtime checks"
  
  security:
    forbidden: ["Exposed API keys", "Unvalidated inputs", "Missing CORS headers"]
    required: ["Rate limiting", "Security event logging", "Input sanitization", "Authentication checks"]

# Authentication & Database
auth:
  clerk:
    import: "import { auth } from '@clerk/nextjs/server'"
    rules:
      - "await auth() required"
      - "Server-side auth checks"
      - "Webhook event handling"
      - "Supabase user sync"
      - "Protected routes in middleware"
      - "No @clerk/nextjs without server"

database:
  supabase:
    required: true
    usage: "All data operations must use Supabase client"
    client_init:
      import: "import { createServerClient } from '@supabase/ssr'"
      cookies: "await cookies() from next/headers"
      config:
        url: "process.env.SUPABASE_URL"
        key: "process.env.SUPABASE_SERVICE_KEY"
    table_naming:
      format: "PascalCase (e.g., User, BaseProfile, RealtorProfile)"
      examples: 
        - "User not users"
        - "CoachApplication not coach_applications"
        - "RealtorProfile not realtor_profile"
    id_types:
      clerk: "userId: string (e.g., user_2r0JFaVbINR4TBRNFzcwIsyEXV0)"
      database: "id: number (auto-incrementing integer)"
      usage:
        - "Use userId (string) when querying by Clerk ID"
        - "Use id (number) for all database relationships"
        - "Never use Clerk IDs in foreign key relationships"
    relationships:
      user_references: "Must use database user_id (bigint), never clerk_id"
      foreign_keys: "All foreign keys must be bigint type"
      multiple_relations:
        - "When a table has multiple relationships to the same table, specify the exact relationship in joins"
        - "Example: User!CoachApplication_userId_fkey for applicant, User!CoachApplication_reviewedBy_fkey for reviewer"
    required_fields:
      timestamps:
        - "updatedAt: DateTime required in all tables"
        - "Must be included in all insert/update operations"
        - "Format: new Date().toISOString()"
      audit:
        - "createdAt: DateTime @default(now())"
        - "updatedAt: DateTime @updatedAt"
  
  prisma:
    allowed_for: "schema management and migrations only"
    forbidden: "direct database operations"
    seeding:
      location: "prisma/seed.js"
      format: "CommonJS format with require() statements"
      dependencies: ["@supabase/supabase-js", "dotenv"]
      required_fields: ["updatedAt", "JSON.stringify for arrays/objects"]
      error_handling: "console.error('Seed error:', error)"

# Server-Side Implementation
server:
  components:
    directives: ["'use server'", "authentication check", "try-catch blocks", "error logging"]
  
  actions:
    location: "utils/actions"
    structure:
      - "'use server' directive required"
      - "Separate file per resource type"
      - "Named exports for each action"
      - "User ID resolution before operations"
    naming:
      prefix: ["fetch", "create", "update", "delete"]
      format: "prefixResourceName (e.g., fetchUsers, createPost)"
  
  api:
    required_steps:
      - "Authentication check"
      - "Database user ID lookup"
      - "Data validation"
      - "Database operation"
      - "Error handling"
      - "Response formatting"
    response_format:
      success: "NextResponse.json({ data })"
      error: "new NextResponse('message', { status: code })"

# Type System
types:
  base_location: "utils/types.ts"
  validation: "Zod schemas"
  required_types:
    base: ["DatabaseUser", "UserRelation"]
    user:
      clerk_id: "string"
      database_id: "number"
      relationships: "number (foreign keys)"
  schema_enforcement:
    models:
      user:
        primary_key: "id Int @id @default(autoincrement())"
        auth_field: "userId String @unique"
        required_fields: ["email", "role", "status"]
    validation:
      zod_schemas:
        naming: "modelNameSchema"
        required: ["email", "ids", "dates"]

# Error Handling
errors:
  logging:
    format: "console.error('[CONTEXT_ERROR]', error)"
    contexts: ["API", "AUTH", "DB", "PAYMENT", "WEBHOOK", "TYPE", "VALIDATION"]
  return_format: "{ data: T | null, error: Error | null }"

# Integrations
integrations:
  stripe:
    rules: ["Secret key server-side only", "Webhook handlers", "Supabase storage", "Error handling"]
  
  calendly:
    structure:
      lib: ["lib/calendly-api.ts", "lib/calendly.ts"]
      features: ["Server-side API calls", "Client widget", "Webhook handling"]
      storage: ["Supabase event storage", "User profile linking"]
  
  zoom:
    structure:
      lib: ["lib/zoom-api.ts", "app/api/zoom/auth/"]
      features: ["Server-side creation", "JWT auth", "Webhook processing"]
      security: ["Server-side credentials", "OAuth flow", "Token validation"]

# Meeting Scheduling
scheduling:
  flow: ["Calendly event", "Zoom meeting", "Database record", "Notification"]
  required_fields:
    event: ["start_time", "end_time", "attendees", "meeting_link"]
    storage: ["event_id", "meeting_id", "user_id", "status"]
  error_handling: ["Double booking", "API failures", "Timezone issues", "Creation failures"]

# Documentation
documentation:
  required_comments: ["Complex types", "Schema relationships", "Validation rules"]
  jsdoc_format: |
    /**
     * @description Type description
     * @property {type} name - Property description
     */ 