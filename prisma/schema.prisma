generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum TicketStatus {
  open
  in_progress
  closed
}

enum UserStatus {
  active
  inactive
  suspended
}

enum SessionStatus {
  scheduled
  completed
  cancelled
  no_show
}

enum Currency {
  USD
  EUR
  GBP
}

enum PaymentMethod {
  credit_card
  debit_card
  bank_transfer
}

enum PayoutStatus {
  pending
  processed
  failed
}

enum RefundStatus {
  pending
  completed
  failed
}

enum DisputeStatus {
  open
  resolved
  rejected
}

enum GoalStatus {
  in_progress
  completed
  overdue
}

enum GoalType {
  sales
  listings
  clients
  custom
}

enum AchievementType {
  milestone
  performance
  learning
}

enum UserRole {
  MENTEE
  COACH
  ADMIN
}

enum SessionType {
  PEER_TO_PEER
  MENTORSHIP
  GROUP
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  HIDDEN
}

// Models
model User {
  id                    Int                     @id @default(autoincrement())
  userId                String                  @unique // Clerk ID
  email                 String                  @unique
  firstName             String?
  lastName              String?
  role                  String                  @default("mentee")
  stripeCustomerId      String?                 @unique
  stripeConnectAccountId String?                @unique
  createdAt            DateTime                @default(now()) @db.Timestamptz
  updatedAt            DateTime                @updatedAt @db.Timestamptz

  // RESO Member fields
  memberKey           String?   @unique // RESO: MemberKey (MLS ID)
  memberStatus        String    // RESO: MemberStatus
  designations        String[]  // RESO: Designations (CRS, GRI, etc.)
  licenseNumber       String?   @unique
  companyName         String?
  phoneNumber         String?
  
  // Application-specific fields
  status              UserStatus @default(active)
  profileImageUrl     String?
  
  // Profile Relations (simplified)
  coachProfile        CoachProfile?
  menteeProfile       MenteeProfile?
  
  // Existing integrations
  calendlyIntegration CalendlyIntegration?
  coachingSchedules     CoachingAvailabilitySchedule[]
  
  // Session Relations
  sessions             Session[]               @relation("UserSessions")
  coachingSessions     Session[]               @relation("CoachSessions")
  paymentMethods       StripePaymentMethod[]
  setupIntents         SetupIntent[]
  stripeAccount        StripeConnectedAccount?
  sentTransactions     Transaction[]           @relation("TransactionPayer")
  receivedTransactions Transaction[]           @relation("TransactionCoach")
  
  // Keep existing relations
  paymentsMade          Payment[]        @relation("Payer")
  paymentsReceived      Payment[]        @relation("Payee")
  payouts               Payout[]         @relation("PayoutPayee")
  reviewsGiven          Review[]         @relation("Reviewer")
  reviewsReceived       Review[]         @relation("Reviewee")
  goals                 Goal[]
  achievements          Achievement[]
  
  // Message Relations
  messagesSent          Message[]        @relation("Sender")
  messagesReceived      Message[]        @relation("Recipient")
  
  // Referral Relations
  referralsGiven        Referral[]       @relation("Referrer")
  referralsReceived     Referral[]       @relation("Referee")
  
  // Other Relations
  applications          CoachApplication[] @relation("Applicant")
  reviewedApplications  CoachApplication[] @relation("Reviewer")
  authoredNotes         Note[]           @relation("AuthorNotes")
  relatedNotes          Note[]           @relation("RelatedUserNotes")
  reminders             Reminder[]
  supportTickets        SupportTicket[]   @relation("UserSupportTickets")
  subscriptions         Subscription[]
  invoices              Invoice[]
  calendlyEvents        CalendlyEvent[]

  @@index([userId])
  @@index([email])
  @@index([role])
  @@map("User")
}

model CoachProfile {
  id                  Int       @id @default(autoincrement())
  userDbId            Int       @unique
  bio                 String?
  specialties         String[]
  yearsCoaching        Int?
  certifications      String[]
  hourlyRate          Decimal? @db.Decimal(10,2)
  
  // Calendly Integration
  calendlyUrl         String?
  eventTypeUrl        String?
  
  // Session Configuration
  isActive            Boolean   @default(true)
  defaultDuration     Int       @default(60)
  allowCustomDuration Boolean   @default(false)
  minimumDuration     Int       @default(30)
  maximumDuration     Int       @default(120)
  totalSessions       Int       @default(0)
  averageRating       Decimal?  @db.Decimal(3,2)
  
  user                User      @relation(fields: [userDbId], references: [id], onDelete: Cascade)

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([userDbId])
}

model MenteeProfile {
  id                  Int       @id @default(autoincrement())
  userDbId            Int       @unique
  focusAreas          String[]
  experienceLevel     String?
  learningStyle       String?
  goals               Json?    // Structured goals data
  
  // Add defaults to tracking fields
  sessionsCompleted   Int       @default(0)
  isActive            Boolean   @default(true)
  lastSessionDate     DateTime? // No default needed
  
  user                User      @relation(fields: [userDbId], references: [id], onDelete: Cascade)

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([userDbId])
}

model Session {
  id                  Int       @id @default(autoincrement())
  menteeDbId         Int
  coachDbId          Int
  startTime          DateTime   @db.Timestamptz
  endTime            DateTime   @db.Timestamptz
  status             String     @default("scheduled") // scheduled, completed, cancelled
  sessionNotes       String?
  zoomMeetingId      String?
  zoomMeetingUrl     String?
  
  // Payment fields
  priceAmount         Float?
  currency            String?    @default("usd")
  platformFeeAmount   Float?
  coachPayoutAmount   Float?
  stripePaymentIntentId String?
  paymentStatus       String?    @default("pending") // pending, completed, failed, refunded
  payoutStatus        String?    // null, completed, failed
  
  createdAt          DateTime   @default(now()) @db.Timestamptz
  updatedAt          DateTime   @updatedAt @db.Timestamptz

  // Relationships
  mentee             User       @relation("UserSessions", fields: [menteeDbId], references: [id])
  coach              User       @relation("CoachSessions", fields: [coachDbId], references: [id])
  transaction        Transaction?
  payment            Payment?   @relation("SessionPayment")
  reviews            Review[]
  notes              Note[]
  reminders          Reminder[]
  calendlyEvent      CalendlyEvent? @relation("SessionCalendlyEvent")
  zoomSession        ZoomSession?

  @@index([menteeDbId])
  @@index([coachDbId])
  @@map("Session")
}

model Payment {
  id              Int      @id @default(autoincrement())
  sessionId       Int?     @unique
  payerDbId       Int
  payeeDbId       Int
  amount          Decimal  @db.Decimal(10,2)
  currency        Currency @default(USD)
  status          PaymentStatus @default(pending)
  stripePaymentId String?

  session         Session? @relation("SessionPayment", fields: [sessionId], references: [id], onDelete: SetNull)
  payer           User     @relation("Payer", fields: [payerDbId], references: [id], onDelete: Cascade)
  payee           User     @relation("Payee", fields: [payeeDbId], references: [id], onDelete: Cascade)
  disputes        Dispute[]
  chargebacks     Chargeback[]
  refunds         Refund[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@index([payerDbId])
  @@index([payeeDbId])
}

model Review {
  id                  Int       @id @default(autoincrement())
  reviewerDbId        Int
  revieweeDbId         Int
  sessionId           Int?
  rating              Int
  comment             String?
  status              String    @default("published")
  isVerified          Boolean   @default(false)

  reviewer            User      @relation("Reviewer", fields: [reviewerDbId], references: [id], onDelete: Cascade)
  reviewee            User      @relation("Reviewee", fields: [revieweeDbId], references: [id], onDelete: Cascade)
  session             Session?  @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([reviewerDbId])
  @@index([revieweeDbId])
  @@index([sessionId])
}

model CoachApplication {
  id              Int      @id @default(autoincrement())
  applicantDbId   Int
  status          String   @default("pending")
  experience      String
  specialties     String[] @default([])
  applicationDate DateTime @default(now())
  reviewerDbId    Int?
  reviewDate      DateTime?
  notes           String?

  applicant       User     @relation("Applicant", fields: [applicantDbId], references: [id], onDelete: Cascade)
  reviewer        User?    @relation("Reviewer", fields: [reviewerDbId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicantDbId])
  @@index([reviewerDbId])
}

model Note {
  id              Int      @id @default(autoincrement())
  authorDbId      Int
  relatedUserDbId Int?
  sessionId       Int?
  content         String
  visibility      String   @default("private")

  author          User     @relation("AuthorNotes", fields: [authorDbId], references: [id], onDelete: Cascade)
  relatedUser     User?    @relation("RelatedUserNotes", fields: [relatedUserDbId], references: [id], onDelete: SetNull)
  session         Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorDbId])
  @@index([relatedUserDbId])
  @@index([sessionId])
}

model SupportTicket {
  id              Int          @id @default(autoincrement())
  userDbId        Int
  title           String
  description     String
  status          TicketStatus @default(open)

  user            User         @relation("UserSupportTickets", fields: [userDbId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
}

model Payout {
  id               Int          @id @default(autoincrement())
  payeeDbId        Int
  amount           Decimal      @db.Decimal(10,2)
  currency         String       @default("USD")
  stripeTransferId String?
  status           PayoutStatus @default(pending)
  scheduledDate    DateTime
  processedAt      DateTime?

  payee            User         @relation("PayoutPayee", fields: [payeeDbId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([payeeDbId])
}

model Dispute {
  id        Int           @id @default(autoincrement())
  paymentId Int
  reason    String?
  status    DisputeStatus @default(open)

  payment   Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
}

model Chargeback {
  id        Int      @id @default(autoincrement())
  paymentId Int
  reason    String?
  status    String   @default("open")

  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
}

model Refund {
  id        Int          @id @default(autoincrement())
  paymentId Int
  reason    String?
  status    RefundStatus @default(pending)

  payment   Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
}

model Message {
  id              Int      @id @default(autoincrement())
  senderDbId      Int
  recipientDbId   Int
  content         String
  readStatus      String   @default("unread")
  sentAt          DateTime @default(now())

  sender          User     @relation("Sender", fields: [senderDbId], references: [id], onDelete: Cascade)
  recipient       User     @relation("Recipient", fields: [recipientDbId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderDbId])
  @@index([recipientDbId])
}

model Referral {
  id              Int      @id @default(autoincrement())
  referrerDbId    Int
  refereeDbId     Int
  referralCode    String   @unique
  status          String   @default("pending")

  referrer        User     @relation("Referrer", fields: [referrerDbId], references: [id], onDelete: Cascade)
  referee         User     @relation("Referee", fields: [refereeDbId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([referrerDbId])
  @@index([refereeDbId])
}

model Reminder {
  id              Int      @id @default(autoincrement())
  userDbId        Int
  sessionId       Int?
  message         String
  remindAt        DateTime
  status          String   @default("pending")

  user            User     @relation(fields: [userDbId], references: [id], onDelete: Cascade)
  session         Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
  @@index([sessionId])
}

model CalendlyIntegration {
  id                Int      @id @default(autoincrement())
  userDbId          Int      @unique
  user              User     @relation(fields: [userDbId], references: [id])
  userId            String   // Calendly user ID
  eventTypeId       String   // Default event type ID
  accessToken       String
  refreshToken      String
  scope             String
  organization      String?
  createdAt         DateTime @default(now()) @db.Timestamptz
  updatedAt         DateTime @updatedAt @db.Timestamptz

  @@index([userDbId])
  @@map("CalendlyIntegration")
}

model Subscription {
  id                     Int       @id @default(autoincrement())
  subscriptionId         String    @unique
  userDbId              Int
  stripeCustomerId      String
  status                String
  startDate             DateTime
  endDate               DateTime?
  planId                String
  defaultPaymentMethodId String?

  user                  User      @relation(fields: [userDbId], references: [id], onDelete: Cascade)
  plan                  SubscriptionPlan @relation(fields: [planId], references: [planId], onDelete: Restrict)
  invoices              Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
  @@index([planId])
}

model SubscriptionPlan {
  id          Int       @id @default(autoincrement())
  planId      String    @unique
  name        String
  description String
  amount      Decimal   @db.Decimal(10,2)
  currency    String    @default("USD")
  interval    String
  isActive    Boolean   @default(true)

  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id              Int       @id @default(autoincrement())
  invoiceId       String    @unique
  subscriptionId  String
  userDbId        Int?
  amountPaid      Decimal   @db.Decimal(10,2)
  amountDue       Decimal?  @db.Decimal(10,2)
  currency        String    @default("USD")
  status          String
  dueDate         DateTime?

  subscription    Subscription? @relation(fields: [subscriptionId], references: [subscriptionId], onDelete: SetNull)
  user            User?        @relation(fields: [userDbId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionId])
  @@index([userDbId])
}

model CalendlyWebhookEvent {
  id          Int      @id @default(autoincrement())
  eventType   String
  payload     Json
  processed   Boolean  @default(false)
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([eventType])
  @@index([processed])
}

model CalendlyEvent {
  id            Int      @id @default(autoincrement())
  eventUuid     String   @unique
  userDbId      Int
  status        String
  eventType     String
  inviteeEmail  String
  inviteeName   String
  sessionId     Int?     @unique

  // Relationships
  session       Session? @relation("SessionCalendlyEvent", fields: [sessionId], references: [id])
  user          User     @relation(fields: [userDbId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userDbId])
  @@index([eventUuid])
}

model ZoomSession {
  id            Int      @id @default(autoincrement())
  sessionId     Int      @unique
  topic         String
  status        String
  joinUrl       String?

  // Relationships
  session       Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([sessionId])
}

model Goal {
  id          Int        @id @default(autoincrement())
  userDbId    Int
  title       String
  description String?
  target      Float
  current     Float      @default(0)
  deadline    DateTime
  type        GoalType
  status      GoalStatus @default(in_progress)
  
  // Relationships
  user        User       @relation(fields: [userDbId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userDbId])
  @@index([type])
  @@index([status])
}

model Achievement {
  id          Int              @id @default(autoincrement())
  userDbId    Int
  title       String
  description String
  earnedAt    DateTime         @default(now())
  type        AchievementType
  icon        String
  
  // Relationships
  user        User             @relation(fields: [userDbId], references: [id], onDelete: Cascade)

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([userDbId])
  @@index([type])
}

model CoachingAvailabilitySchedule {
  id                  Int       @id @default(autoincrement())
  userDbId            Int
  name                String    // e.g., "Standard Schedule", "Holiday Hours"
  timezone            String
  isDefault           Boolean   @default(false)
  active              Boolean   @default(true)
  
  // Session Configuration
  defaultDuration     Int       @default(60)
  minimumDuration     Int       @default(30)
  maximumDuration     Int       @default(120)
  allowCustomDuration Boolean   @default(false)
  bufferBefore        Int       @default(15)  // minutes
  bufferAfter         Int       @default(15)  // minutes
  
  // Availability Rules
  rules               Json      // Stored as JSONB - weekly schedule, breaks, etc.
  
  // Integration Settings
  calendlyEnabled     Boolean   @default(false)
  zoomEnabled         Boolean   @default(false)
  
  // Metrics
  totalSessions       Int       @default(0)
  averageRating       Decimal?  @db.Decimal(3,2)
  
  user                User      @relation(fields: [userDbId], references: [id], onDelete: Cascade)

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([userDbId])
}

model StripePaymentMethod {
  id                   Int      @id @default(autoincrement())
  userDbId            Int
  stripePaymentMethodId String
  type                String    // card, bank_account
  isDefault           Boolean   @default(false)
  metadata            Json      @default("{}")
  createdAt           DateTime  @default(now()) @db.Timestamptz
  updatedAt           DateTime  @updatedAt @db.Timestamptz

  // Relationships
  user                User     @relation(fields: [userDbId], references: [id])

  @@unique([userDbId, stripePaymentMethodId])
  @@index([userDbId])
  @@map("StripePaymentMethod")
}

model SetupIntent {
  id                  Int      @id @default(autoincrement())
  userDbId           Int
  stripeSetupIntentId String
  status             String
  createdAt          DateTime  @default(now()) @db.Timestamptz
  updatedAt          DateTime  @updatedAt @db.Timestamptz

  // Relationships
  user               User     @relation(fields: [userDbId], references: [id])

  @@index([userDbId])
  @@map("SetupIntent")
}

model StripeConnectedAccount {
  id                  Int      @id @default(autoincrement())
  userDbId           Int      @unique
  stripeAccountId     String   @unique
  country             String
  defaultCurrency     String   @default("usd")
  payoutsEnabled      Boolean  @default(false)
  detailsSubmitted    Boolean  @default(false)
  chargesEnabled      Boolean  @default(false)
  requiresOnboarding  Boolean  @default(true)
  deauthorizedAt      DateTime? @db.Timestamptz
  createdAt          DateTime  @default(now()) @db.Timestamptz
  updatedAt          DateTime  @updatedAt @db.Timestamptz

  // Relationships
  user               User     @relation(fields: [userDbId], references: [id])

  @@map("StripeConnectedAccount")
}

model Transaction {
  id                  Int      @id @default(autoincrement())
  type                String   // session_payment, bundle_payment, payout, refund
  status              String   // pending, completed, failed, refunded
  amount              Float
  currency            String   @default("usd")
  stripePaymentIntentId String?
  stripeTransferId    String?
  platformFee         Float?
  coachPayout         Float?
  sessionDbId        Int?     @unique
  payerDbId          Int
  coachDbId          Int
  metadata            Json     @default("{}")
  createdAt          DateTime @default(now()) @db.Timestamptz
  updatedAt          DateTime @updatedAt @db.Timestamptz

  // Relationships
  session            Session? @relation(fields: [sessionDbId], references: [id])
  payer              User    @relation("TransactionPayer", fields: [payerDbId], references: [id])
  coach              User    @relation("TransactionCoach", fields: [coachDbId], references: [id])

  @@index([payerDbId])
  @@index([coachDbId])
  @@index([sessionDbId])
  @@map("Transaction")
}
