generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserRole {
  realtor
  loan_officer
  realtor_coach
  loan_officer_coach
  admin
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum TicketStatus {
  open
  in_progress
  closed
}

enum UserStatus {
  active
  inactive
  suspended
}

enum SessionStatus {
  scheduled
  completed
  cancelled
  no_show
}

enum Currency {
  USD
  EUR
  GBP
}

enum PaymentMethod {
  credit_card
  debit_card
  bank_transfer
}

enum PayoutStatus {
  pending
  processed
  failed
}

enum RefundStatus {
  pending
  completed
  failed
}

enum DisputeStatus {
  open
  resolved
  rejected
}

// Models
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  firstName     String?
  lastName      String?
  gender        String?
  profileImageUrl String?
  userId        String   @unique  // Clerk ID
  subscription  String?
  role          UserRole @default(realtor)
  status        String   @default("active")
  brokerId      Int?
  teamId        Int?

  // Profile Relations
  realtorProfile         RealtorProfile?
  loanOfficerProfile     LoanOfficerProfile?
  realtorCoachProfile    RealtorCoachProfile?
  loanOfficerCoachProfile LoanOfficerCoachProfile?
  
  // Session Relations
  coachSessions         Session[]        @relation("SessionCoach")
  menteeSessions        Session[]        @relation("SessionMentee")
  
  // Payment Relations
  paymentsMade          Payment[]        @relation("Payer")
  paymentsReceived      Payment[]        @relation("Payee")
  payouts               Payout[]         @relation("PayoutPayee")
  
  // Review Relations
  reviewsGiven          Review[]         @relation("Reviewer")
  reviewsReceived       Review[]         @relation("Reviewee")
  
  // Message Relations
  messagesSent          Message[]        @relation("Sender")
  messagesReceived      Message[]        @relation("Recipient")
  
  // Referral Relations
  referralsGiven        Referral[]       @relation("Referrer")
  referralsReceived     Referral[]       @relation("Referee")
  
  // Other Relations
  applications          CoachApplication[] @relation("Applicant")
  reviewedApplications  CoachApplication[] @relation("Reviewer")
  authoredNotes         Note[]           @relation("AuthorNotes")
  relatedNotes         Note[]           @relation("RelatedUserNotes")
  reminders            Reminder[]
  supportTickets       SupportTicket[]   @relation("UserSupportTickets")
  calendlyIntegration  CalendlyIntegration?
  subscriptions        Subscription[]
  invoices             Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model RealtorProfile {
  id              Int      @id @default(autoincrement())
  userDbId        Int      @unique
  companyName     String?
  licenseNumber   String?  @unique
  phoneNumber     String?

  user User @relation(fields: [userDbId], references: [id], onDelete: Cascade)
  realtorCoachProfile RealtorCoachProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
}

model LoanOfficerProfile {
  id              Int      @id @default(autoincrement())
  userDbId        Int      @unique
  companyName     String?
  licenseNumber   String?  @unique
  phoneNumber     String?

  user User @relation(fields: [userDbId], references: [id], onDelete: Cascade)
  loanOfficerCoachProfile LoanOfficerCoachProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
}

model RealtorCoachProfile {
  id              Int      @id @default(autoincrement())
  userDbId        Int      @unique
  specialty       String?
  bio             String?
  experience      String?
  certifications  String[] @default([])
  availability    String?
  sessionLength   String?
  specialties     String   @default("[]") // Stored as JSON string
  calendlyUrl     String?
  eventTypeUrl    String?
  hourlyRate      Decimal? @db.Decimal(10,2)

  user User @relation(fields: [userDbId], references: [id], onDelete: Cascade, map: "RealtorCoachProfile_user_fkey")
  realtorProfile RealtorProfile @relation(fields: [userDbId], references: [userDbId], onDelete: Cascade, map: "RealtorCoachProfile_realtorProfile_fkey")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
}

model LoanOfficerCoachProfile {
  id                Int       @id @default(autoincrement())
  userDbId          Int       @unique
  specialties       String?
  yearsOfExperience Int?
  hourlyRate        Decimal?  @db.Decimal(10,2)
  bio               String?
  oneTimeCallPrice  Decimal?  @db.Decimal(10,2)
  bundlePrice       Decimal?  @db.Decimal(10,2)

  user              User      @relation(fields: [userDbId], references: [id], onDelete: Cascade, map: "LoanOfficerCoachProfile_user_fkey")
  loanOfficerProfile LoanOfficerProfile @relation(fields: [userDbId], references: [userDbId], onDelete: Cascade, map: "LoanOfficerCoachProfile_loanOfficerProfile_fkey")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
}

model Session {
  id              Int      @id @default(autoincrement())
  coachDbId       Int
  menteeDbId      Int
  calendlyEventId String?
  durationMinutes Int
  status          String   @default("scheduled")
  startTime       DateTime
  endTime         DateTime

  coach           User     @relation("SessionCoach", fields: [coachDbId], references: [id], onDelete: Cascade)
  mentee          User     @relation("SessionMentee", fields: [menteeDbId], references: [id], onDelete: Cascade)
  payment         Payment? @relation("SessionPayment")
  reviews         Review[]
  notes           Note[]
  reminders       Reminder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([coachDbId])
  @@index([menteeDbId])
  @@index([startTime])
  @@index([endTime])
}

model Payment {
  id              Int      @id @default(autoincrement())
  sessionId       Int?     @unique
  payerDbId       Int
  payeeDbId       Int
  amount          Decimal  @db.Decimal(10,2)
  currency        String   @default("USD")
  status          String   @default("pending")
  stripePaymentId String?

  session         Session? @relation("SessionPayment", fields: [sessionId], references: [id], onDelete: SetNull)
  payer           User     @relation("Payer", fields: [payerDbId], references: [id], onDelete: Cascade)
  payee           User     @relation("Payee", fields: [payeeDbId], references: [id], onDelete: Cascade)
  disputes        Dispute[]
  chargebacks     Chargeback[]
  refunds         Refund[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@index([payerDbId])
  @@index([payeeDbId])
}

model Review {
  id              Int      @id @default(autoincrement())
  reviewerDbId    Int
  revieweeDbId    Int
  sessionId       Int?
  rating          Int
  comment         String?
  status          String   @default("published")

  reviewer        User     @relation("Reviewer", fields: [reviewerDbId], references: [id], onDelete: Cascade)
  reviewee        User     @relation("Reviewee", fields: [revieweeDbId], references: [id], onDelete: Cascade)
  session         Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewerDbId])
  @@index([revieweeDbId])
  @@index([sessionId])
}

model CoachApplication {
  id              Int      @id @default(autoincrement())
  applicantDbId   Int
  status          String   @default("pending")
  experience      String
  specialties     String[] @default([])
  applicationDate DateTime @default(now())
  reviewerDbId    Int?
  reviewDate      DateTime?
  notes           String?

  applicant       User     @relation("Applicant", fields: [applicantDbId], references: [id], onDelete: Cascade)
  reviewer        User?    @relation("Reviewer", fields: [reviewerDbId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicantDbId])
  @@index([reviewerDbId])
}

model Note {
  id              Int      @id @default(autoincrement())
  authorDbId      Int
  relatedUserDbId Int?
  sessionId       Int?
  content         String
  visibility      String   @default("private")

  author          User     @relation("AuthorNotes", fields: [authorDbId], references: [id], onDelete: Cascade)
  relatedUser     User?    @relation("RelatedUserNotes", fields: [relatedUserDbId], references: [id], onDelete: SetNull)
  session         Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorDbId])
  @@index([relatedUserDbId])
  @@index([sessionId])
}

model SupportTicket {
  id              Int          @id @default(autoincrement())
  userDbId        Int
  title           String
  description     String
  status          TicketStatus @default(open)

  user            User         @relation("UserSupportTickets", fields: [userDbId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
}

model Payout {
  id               Int          @id @default(autoincrement())
  payeeDbId        Int
  amount           Decimal      @db.Decimal(10,2)
  currency         String       @default("USD")
  stripeTransferId String?
  status           PayoutStatus @default(pending)
  scheduledDate    DateTime
  processedAt      DateTime?

  payee            User         @relation("PayoutPayee", fields: [payeeDbId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([payeeDbId])
}

model Dispute {
  id        Int           @id @default(autoincrement())
  paymentId Int
  reason    String?
  status    DisputeStatus @default(open)

  payment   Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
}

model Chargeback {
  id        Int      @id @default(autoincrement())
  paymentId Int
  reason    String?
  status    String   @default("open")

  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
}

model Refund {
  id        Int          @id @default(autoincrement())
  paymentId Int
  reason    String?
  status    RefundStatus @default(pending)

  payment   Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
}

model Message {
  id              Int      @id @default(autoincrement())
  senderDbId      Int
  recipientDbId   Int
  content         String
  readStatus      String   @default("unread")
  sentAt          DateTime @default(now())

  sender          User     @relation("Sender", fields: [senderDbId], references: [id], onDelete: Cascade)
  recipient       User     @relation("Recipient", fields: [recipientDbId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderDbId])
  @@index([recipientDbId])
}

model Referral {
  id              Int      @id @default(autoincrement())
  referrerDbId    Int
  refereeDbId     Int
  referralCode    String   @unique
  status          String   @default("pending")

  referrer        User     @relation("Referrer", fields: [referrerDbId], references: [id], onDelete: Cascade)
  referee         User     @relation("Referee", fields: [refereeDbId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([referrerDbId])
  @@index([refereeDbId])
}

model Reminder {
  id              Int      @id @default(autoincrement())
  userDbId        Int
  sessionId       Int?
  message         String
  remindAt        DateTime
  status          String   @default("pending")

  user            User     @relation(fields: [userDbId], references: [id], onDelete: Cascade)
  session         Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
  @@index([sessionId])
}

model CalendlyIntegration {
  id              Int      @id @default(autoincrement())
  userDbId        Int      @unique
  accessToken     String
  refreshToken    String
  scope           String
  organizationUrl String
  schedulingUrl   String
  expiresAt       DateTime

  user            User     @relation(fields: [userDbId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
}

model Subscription {
  id                     Int       @id @default(autoincrement())
  subscriptionId         String    @unique
  userDbId              Int
  stripeCustomerId      String
  status                String
  startDate             DateTime
  endDate               DateTime?
  planId                String
  defaultPaymentMethodId String?

  user                  User      @relation(fields: [userDbId], references: [id], onDelete: Cascade)
  plan                  SubscriptionPlan @relation(fields: [planId], references: [planId], onDelete: Restrict)
  invoices              Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDbId])
  @@index([planId])
}

model SubscriptionPlan {
  id          Int       @id @default(autoincrement())
  planId      String    @unique
  name        String
  description String
  amount      Decimal   @db.Decimal(10,2)
  currency    String    @default("USD")
  interval    String
  isActive    Boolean   @default(true)

  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id              Int       @id @default(autoincrement())
  invoiceId       String    @unique
  subscriptionId  String
  userDbId        Int?
  amountPaid      Decimal   @db.Decimal(10,2)
  amountDue       Decimal?  @db.Decimal(10,2)
  currency        String    @default("USD")
  status          String
  dueDate         DateTime?

  subscription    Subscription? @relation(fields: [subscriptionId], references: [subscriptionId], onDelete: SetNull)
  user            User?        @relation(fields: [userDbId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionId])
  @@index([userDbId])
}
