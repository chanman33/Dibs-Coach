generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  ulid                     String                         @id @db.Char(26)
  userId                   String                         @unique
  email                    String                         @unique
  firstName                String?
  lastName                 String?
  phoneNumber              String?
  displayName              String?
  bio                      String?
  systemRole               UserRole                       @default(USER)
  capabilities             UserCapability[]
  isCoach                  Boolean                        @default(false)
  isMentee                 Boolean                        @default(false)
  stripeCustomerId         String?                        @unique
  stripeConnectAccountId   String?                        @unique
  createdAt                DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                       @updatedAt @db.Timestamptz(6)
  status                   UserStatus                     @default(ACTIVE)
  profileImageUrl          String?
  realEstateDomains        RealEstateDomain[]             @default([])
  primaryDomain            RealEstateDomain?
  totalYearsRE             Int                            @default(0)
  languages                Language[]                     @default([en])
  primaryMarket            String?
  aiThreads                AIThread[]
  adminAuditLogs           AdminAuditLog[]                @relation("AdminAuditLogs")
  applications             CoachApplication[]             @relation("Applicant")
  reviewedApplications     CoachApplication[]             @relation("Reviewer")
  coachProfile             CoachProfile?
  coachingSchedules        CoachingAvailabilitySchedule[]
  commercialProfile        CommercialProfile?
  assignedLeads            EnterpriseLeads[]              @relation("AssignedLeads")
  goals                    Goal[]
  insuranceProfile         InsuranceProfile?
  investorProfile          InvestorProfile?
  invoices                 Invoice[]
  mortgageProfile          LoanOfficerProfile?
  marketingProfile         MarketingProfile?
  menteeProfile            MenteeProfile?
  messagesReceived         Message[]                      @relation("Recipient")
  messagesSent             Message[]                      @relation("Sender")
  authoredNotes            Note[]                         @relation("AuthorNotes")
  relatedNotes             Note[]                         @relation("RelatedUserNotes")
  organizationMemberships  OrganizationMember[]
  paymentsReceived         Payment[]                      @relation("Payee")
  paymentsMade             Payment[]                      @relation("Payer")
  payouts                  Payout[]                       @relation("PayoutPayee")
  privateCreditProfile     PrivateCreditProfile?
  professionalRecognitions ProfessionalRecognition[]
  propertyManagerProfile   PropertyManagerProfile?
  realtorProfile           RealtorProfile?
  referralsReceived        Referral[]                     @relation("Referee")
  referralsGiven           Referral[]                     @relation("Referrer")
  reminders                Reminder[]
  reviewsReceived          Review[]                       @relation("Reviewee")
  reviewsGiven             Review[]                       @relation("Reviewer")
  coachingSessions         Session[]                      @relation("CoachSessions")
  sessions                 Session[]                      @relation("UserSessions")
  setupIntents             SetupIntent[]
  stripeAccount            StripeConnectedAccount?
  paymentMethods           StripePaymentMethod[]
  subscriptions            Subscription[]
  supportTickets           SupportTicket[]                @relation("UserSupportTickets")
  titleEscrowProfile       TitleEscrowProfile?
  receivedTransactions     Transaction[]                  @relation("TransactionCoach")
  sentTransactions         Transaction[]                  @relation("TransactionPayer")
  createdResources         TrainingResource[]
  assignments              ResourceAssignment[]             @relation("UserAssignments")
  assignedResources        ResourceAssignment[]             @relation("AssignedByUser")
  featureWaitlists         FeatureWaitlist[]
  calendarIntegration      CalendarIntegration?
  calBookings              CalBooking[]
  seatLicenses             SeatLicense[]                  @relation("licensedUser")
  assignedLicenses         SeatLicense[]                  @relation("licenseAssigner")
  budgetAllocations        BudgetAllocation[]
  orgPaymentMethods        PaymentMethod[]
  billingEvents            BillingEvent[]

  @@index([userId])
  @@index([email])
  @@index([systemRole])
  @@index([isCoach])
  @@index([isMentee])
  @@index([status])
  @@index([realEstateDomains])
  @@index([primaryDomain])
  @@index([primaryMarket])
  @@map("User")
}

model MenteeProfile {
  ulid              String    @id @db.Char(26)
  userUlid          String    @unique @db.Char(26)
  focusAreas        String[]
  experienceLevel   String?
  learningStyle     String?
  sessionsCompleted Int       @default(0)
  isActive          Boolean   @default(true)
  lastSessionDate   DateTime?
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @db.Timestamptz(6)
  user              User      @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("MenteeProfile")
}

model CoachProfile {
  ulid                     String                    @id @db.Char(26)
  userUlid                 String                    @unique @db.Char(26)
  yearsCoaching            Int?
  coachSkills              String[]                  @default([])
  hourlyRate               Int?
  isActive                 Boolean                   @default(true)
  defaultDuration          Int                       @default(60)
  allowCustomDuration      Boolean                   @default(false)
  minimumDuration          Int                       @default(30)
  maximumDuration          Int                       @default(120)
  totalSessions            Int                       @default(0)
  averageRating            Decimal?                  @db.Decimal(3, 2)
  profileStatus            ProfileStatus             @default(DRAFT)
  completionPercentage     Int                       @default(0)
  createdAt                DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                  @updatedAt @db.Timestamptz(6)
  coachPrimaryDomain       RealEstateDomain?
  coachRealEstateDomains   RealEstateDomain[]        @default([])
  eventTypeUrl             String?
  slogan                   String?
  lastSlugUpdateAt         DateTime?                 @db.Timestamptz(6)
  profileSlug              String?                   @unique
  user                     User                      @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  professionalRecognitions ProfessionalRecognition[]

  @@index([userUlid])
  @@index([profileStatus])
  @@index([coachRealEstateDomains])
  @@index([coachPrimaryDomain])
  @@index([profileSlug])
  @@map("CoachProfile")
}

model Organization {
  ulid              String               @id @db.Char(26)
  name              String
  description       String?
  status            String               @default("ACTIVE")
  type              OrgType              @default(INDIVIDUAL)
  industry          OrgIndustry?
  level             OrgLevel             @default(LOCAL)
  tier              OrgTier              @default(FREE)
  parentUlid        String?              @db.Char(26)
  metadata          Json?
  licenseNumbers    Json?
  specializations   String[]
  createdAt         DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime             @updatedAt @db.Timestamptz(6)
  marketingProfile  MarketingProfile?
  parent            Organization?        @relation("OrganizationHierarchy", fields: [parentUlid], references: [ulid])
  children          Organization[]       @relation("OrganizationHierarchy")
  members           OrganizationMember[]
  regions           Region[]
  rolePermissions   RolePermission[]
  subscriptions     Subscription[]
  trainingResources TrainingResource[]
  featureWaitlists  FeatureWaitlist[]
  goals             Goal[]
  paymentMethods    PaymentMethod[]
  billingEvents     BillingEvent[]

  @@index([status])
  @@index([type])
  @@index([level])
  @@index([parentUlid])
  @@map("Organization")
}

model Region {
  ulid             String       @id @db.Char(26)
  organizationUlid String       @db.Char(26)
  name             String
  type             String
  parentUlid       String?      @db.Char(26)
  metadata         Json?
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(6)
  organization     Organization @relation(fields: [organizationUlid], references: [ulid], onDelete: Cascade)
  parent           Region?      @relation("RegionHierarchy", fields: [parentUlid], references: [ulid])
  children         Region[]     @relation("RegionHierarchy")

  @@index([organizationUlid])
  @@index([parentUlid])
  @@map("Region")
}

model OrganizationMember {
  ulid              String       @id @db.Char(26)
  organizationUlid  String       @db.Char(26)
  userUlid          String       @db.Char(26)
  role              OrgRole      @default(MEMBER)
  scope             String?      @default("LOCAL")
  status            String       @default("ACTIVE")
  customPermissions Json?
  metadata          Json?
  createdAt         DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime     @updatedAt @db.Timestamptz(6)
  organization      Organization @relation(fields: [organizationUlid], references: [ulid], onDelete: Cascade)
  user              User         @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@unique([organizationUlid, userUlid])
  @@index([organizationUlid])
  @@index([userUlid])
  @@index([role])
  @@index([status])
  @@map("OrganizationMember")
}

model RolePermission {
  ulid             String       @id @db.Char(26)
  organizationUlid String       @db.Char(26)
  role             OrgRole
  permissions      Json
  metadata         Json?
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(6)
  organization     Organization @relation(fields: [organizationUlid], references: [ulid], onDelete: Cascade)

  @@unique([organizationUlid, role])
  @@index([organizationUlid])
  @@index([role])
  @@map("RolePermission")
}

model MarketingProfile {
  ulid               String        @id @db.Char(26)
  userUlid           String?       @unique @db.Char(26)
  organizationUlid   String?       @unique @db.Char(26)
  slogan             String?
  brandColors        Json?
  logoUrl            String?
  brandGuidelines    Json?
  websiteUrl         String?
  blogUrl            String?
  socialMediaLinks   Json
  marketingAreas     String[]
  targetAudience     String[]
  geographicFocus    Json?
  testimonials       Json?
  pressFeatures      Json?
  marketingMaterials Json?
  brandAssets        Json?
  marketingTeam      Json?
  campaignHistory    Json?
  googleAnalyticsId  String?
  facebookPixelId    String?
  createdAt          DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime      @updatedAt @db.Timestamptz(6)
  organization       Organization? @relation(fields: [organizationUlid], references: [ulid], onDelete: Cascade)
  user               User?         @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@index([organizationUlid])
  @@map("MarketingProfile")
}

model RealtorProfile {
  ulid            String    @id @db.Char(26)
  userUlid        String    @unique @db.Char(26)
  yearsExperience Int?
  propertyTypes   String[]
  specializations String[]
  certifications  String[]
  companyName     String?
  geographicFocus Json?
  primaryMarket   String?
  mlsId           String?   @unique
  mlsName         String?
  mlsStatus       String?   @default("ACTIVE")
  memberKey       String?   @unique
  memberStatus    String?
  designations    String[]
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @db.Timestamptz(6)
  listings        Listing[]
  user            User      @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("RealtorProfile")
}

model LoanOfficerProfile {
  ulid                  String     @id @db.Char(26)
  userUlid              String     @unique @db.Char(26)
  yearsExperience       Int?
  nmls                  String?    @unique
  lenderName            String?
  branchLocation        String?
  loanTypes             LoanType[]
  specializations       String[]
  certifications        String[]
  closedLoansCount      Int?
  totalLoanVolume       Decimal?   @db.Decimal(12, 2)
  averageLoanSize       Decimal?   @db.Decimal(12, 2)
  geographicFocus       Json?
  primaryMarket         String?
  licensedStates        String[]
  minLoanAmount         Decimal?   @db.Decimal(12, 2)
  maxLoanAmount         Decimal?   @db.Decimal(12, 2)
  typicalTurnaroundDays Int?
  createdAt             DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime   @updatedAt @db.Timestamptz(6)
  user                  User       @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("LoanOfficerProfile")
}

model InvestorProfile {
  ulid                   String               @id @db.Char(26)
  userUlid               String               @unique @db.Char(26)
  yearsExperience        Int?
  companyName            String?
  investmentStrategies   InvestmentStrategy[]
  specializations        String[]
  certifications         String[]
  minInvestmentAmount    Decimal?             @db.Decimal(12, 2)
  maxInvestmentAmount    Decimal?             @db.Decimal(12, 2)
  targetRoi              Decimal?             @db.Decimal(5, 2)
  preferredPropertyTypes String[]
  propertiesOwned        Int?
  totalPortfolioValue    Decimal?             @db.Decimal(12, 2)
  completedDeals         Int?
  geographicFocus        Json?
  primaryMarket          String?
  targetMarkets          String[]
  createdAt              DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime             @updatedAt @db.Timestamptz(6)
  user                   User                 @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("InvestorProfile")
}

model PropertyManagerProfile {
  ulid               String                @id @db.Char(26)
  userUlid           String                @unique @db.Char(26)
  yearsExperience    Int?
  companyName        String?
  licenseNumber      String?               @unique
  managerTypes       PropertyManagerType[]
  specializations    String[]
  certifications     String[]
  propertiesManaged  Int?
  totalUnits         Int?
  squareFeetManaged  Decimal?              @db.Decimal(12, 2)
  occupancyRate      Decimal?              @db.Decimal(5, 2)
  geographicFocus    Json?
  primaryMarket      String?
  serviceZips        String[]
  minimumUnits       Int?
  propertyTypes      String[]
  services           String[]
  managementSoftware String?
  createdAt          DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime              @updatedAt @db.Timestamptz(6)
  user               User                  @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("PropertyManagerProfile")
}

model TitleEscrowProfile {
  ulid                   String            @id @db.Char(26)
  userUlid               String            @unique @db.Char(26)
  yearsExperience        Int?
  companyName            String?
  licenseNumber          String?           @unique
  titleEscrowTypes       TitleEscrowType[]
  specializations        String[]
  certifications         String[]
  closingsCompleted      Int?
  averageClosingTime     Int?
  totalTransactionVolume Decimal?          @db.Decimal(12, 2)
  geographicFocus        Json?
  primaryMarket          String?
  licensedStates         String[]
  createdAt              DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime          @updatedAt @db.Timestamptz(6)
  user                   User              @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("TitleEscrowProfile")
}

model InsuranceProfile {
  ulid                String          @id @db.Char(26)
  userUlid            String          @unique @db.Char(26)
  yearsExperience     Int?
  companyName         String?
  licenseNumber       String?         @unique
  insuranceTypes      InsuranceType[]
  specializations     String[]
  certifications      String[]
  policiesIssued      Int?
  totalPremiumVolume  Decimal?        @db.Decimal(12, 2)
  claimProcessingTime Int?
  geographicFocus     Json?
  primaryMarket       String?
  licensedStates      String[]
  createdAt           DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime        @updatedAt @db.Timestamptz(6)
  user                User            @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("InsuranceProfile")
}

model CommercialProfile {
  ulid                   String                   @id @db.Char(26)
  userUlid               String                   @unique @db.Char(26)
  yearsExperience        Int?
  companyName            String?
  licenseNumber          String?                  @unique
  specializations        String[]
  certifications         String[]
  propertyTypes          CommercialPropertyType[]
  dealTypes              CommercialDealType[]
  typicalDealSize        Decimal?                 @db.Decimal(12, 2)
  totalTransactionVolume Decimal?                 @db.Decimal(12, 2)
  completedDeals         Int?
  averageDealSize        Decimal?                 @db.Decimal(12, 2)
  geographicFocus        Json?
  primaryMarket          String?
  serviceAreas           String[]
  createdAt              DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                 @updatedAt @db.Timestamptz(6)
  user                   User                     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("CommercialProfile")
}

model PrivateCreditProfile {
  ulid              String                  @id @db.Char(26)
  userUlid          String                  @unique @db.Char(26)
  yearsExperience   Int?
  companyName       String?
  licenseNumber     String?                 @unique
  specializations   String[]
  certifications    String[]
  minLoanAmount     Decimal?                @db.Decimal(12, 2)
  maxLoanAmount     Decimal?                @db.Decimal(12, 2)
  typicalTermLength Int?
  interestRateRange Json?
  loanTypes         PrivateCreditLoanType[]
  totalLoanVolume   Decimal?                @db.Decimal(12, 2)
  activeLoans       Int?
  averageLoanSize   Decimal?                @db.Decimal(12, 2)
  geographicFocus   Json?
  primaryMarket     String?
  licensedStates    String[]
  createdAt         DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime                @updatedAt @db.Timestamptz(6)
  user              User                    @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("PrivateCreditProfile")
}

model Session {
  ulid                  String        @id @db.Char(26)
  menteeUlid            String        @db.Char(26)
  coachUlid             String        @db.Char(26)
  startTime             DateTime      @db.Timestamptz(6)
  endTime               DateTime      @db.Timestamptz(6)
  status                SessionStatus @default(SCHEDULED)
  sessionType           SessionType?
  sessionNotes          String?
  zoomMeetingId         String?
  zoomMeetingUrl        String?
  priceAmount           Float?
  currency              String?       @default("usd")
  platformFeeAmount     Float?
  coachPayoutAmount     Float?
  stripePaymentIntentId String?
  paymentStatus         String?       @default("pending")
  payoutStatus          String?
  createdAt             DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime      @updatedAt @db.Timestamptz(6)
  disputes              Dispute[]     @relation("SessionDisputes")
  notes                 Note[]
  payment               Payment?      @relation("SessionPayment")
  reminders             Reminder[]
  reviews               Review[]
  coach                 User          @relation("CoachSessions", fields: [coachUlid], references: [ulid])
  mentee                User          @relation("UserSessions", fields: [menteeUlid], references: [ulid])
  transaction           Transaction?
  zoomSession           ZoomSession?

  @@index([menteeUlid])
  @@index([coachUlid])
  @@map("Session")
}

model Payment {
  ulid            String            @id @db.Char(26)
  sessionUlid     String?           @unique @db.Char(26)
  payerUlid       String            @db.Char(26)
  payeeUlid       String            @db.Char(26)
  amount          Decimal           @db.Decimal(10, 2)
  currency        Currency          @default(USD)
  status          PaymentStatus     @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  chargebacks     Chargeback[]
  disputes        Dispute[]         @relation("PaymentDisputes")
  payee           User              @relation("Payee", fields: [payeeUlid], references: [ulid])
  payer           User              @relation("Payer", fields: [payerUlid], references: [ulid])
  session         Session?          @relation("SessionPayment", fields: [sessionUlid], references: [ulid])
  refunds         Refund[]

  @@index([sessionUlid])
  @@index([payerUlid])
  @@index([payeeUlid])
}

model Review {
  ulid         String   @id @db.Char(26)
  reviewerUlid String   @db.Char(26)
  revieweeUlid String   @db.Char(26)
  sessionUlid  String?  @db.Char(26)
  rating       Int
  comment      String?
  status       String   @default("published")
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  reviewee     User     @relation("Reviewee", fields: [revieweeUlid], references: [ulid], onDelete: Cascade)
  reviewer     User     @relation("Reviewer", fields: [reviewerUlid], references: [ulid], onDelete: Cascade)
  session      Session? @relation(fields: [sessionUlid], references: [ulid])

  @@index([reviewerUlid])
  @@index([revieweeUlid])
  @@index([sessionUlid])
}

model CoachApplication {
  ulid               String                 @id @db.Char(26)
  applicantUlid      String                 @db.Char(26)
  status             CoachApplicationStatus @default(PENDING)
  yearsOfExperience  Int
  superPower         String
  aboutYou           String?
  realEstateDomains  String[]               @default([])
  primaryDomain      String?
  resumeUrl          String?
  linkedIn           String?
  primarySocialMedia String?
  reviewerUlid       String?                @db.Char(26)
  reviewDate         DateTime?
  reviewNotes        String?
  isDraft            Boolean                @default(false)
  lastSavedAt        DateTime?              @db.Timestamptz(6)
  draftData          Json?
  draftVersion       Int                    @default(1)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  applicant          User                   @relation("Applicant", fields: [applicantUlid], references: [ulid], onDelete: Cascade)
  reviewer           User?                  @relation("Reviewer", fields: [reviewerUlid], references: [ulid])

  @@index([applicantUlid])
  @@index([reviewerUlid])
  @@index([isDraft, applicantUlid])
}

model Note {
  ulid            String   @id @db.Char(26)
  authorUlid      String   @db.Char(26)
  relatedUserUlid String?  @db.Char(26)
  sessionUlid     String?  @db.Char(26)
  content         String
  visibility      String   @default("private")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  author          User     @relation("AuthorNotes", fields: [authorUlid], references: [ulid], onDelete: Cascade)
  relatedUser     User?    @relation("RelatedUserNotes", fields: [relatedUserUlid], references: [ulid])
  session         Session? @relation(fields: [sessionUlid], references: [ulid])

  @@index([authorUlid])
  @@index([relatedUserUlid])
  @@index([sessionUlid])
}

model SupportTicket {
  ulid        String       @id @db.Char(26)
  userUlid    String       @db.Char(26)
  title       String
  description String
  status      TicketStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation("UserSupportTickets", fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
}

model Payout {
  ulid             String       @id @db.Char(26)
  payeeUlid        String       @db.Char(26)
  amount           Decimal      @db.Decimal(10, 2)
  currency         String       @default("USD")
  stripeTransferId String?
  status           PayoutStatus @default(PENDING)
  scheduledDate    DateTime
  processedAt      DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  payee            User         @relation("PayoutPayee", fields: [payeeUlid], references: [ulid], onDelete: Cascade)

  @@index([payeeUlid])
}

model Dispute {
  ulid                  String   @id @db.Char(26)
  stripeDisputeId       String   @unique
  sessionUlid           String?  @db.Char(26)
  amount                Int
  currency              String
  status                String
  reason                String
  evidenceDueBy         DateTime
  evidence              Json
  stripePaymentIntentId String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  paymentUlid           String?  @db.Char(26)
  payment               Payment? @relation("PaymentDisputes", fields: [paymentUlid], references: [ulid])
  session               Session? @relation("SessionDisputes", fields: [sessionUlid], references: [ulid])

  @@index([sessionUlid])
  @@index([stripeDisputeId])
  @@map("Dispute")
}

model Chargeback {
  ulid        String   @id @db.Char(26)
  paymentUlid String   @db.Char(26)
  reason      String?
  status      String   @default("open")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payment     Payment  @relation(fields: [paymentUlid], references: [ulid], onDelete: Cascade)

  @@index([paymentUlid])
}

model Refund {
  ulid        String       @id @db.Char(26)
  paymentUlid String       @db.Char(26)
  reason      String?
  status      RefundStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  payment     Payment      @relation(fields: [paymentUlid], references: [ulid], onDelete: Cascade)

  @@index([paymentUlid])
}

model Message {
  ulid          String   @id @db.Char(26)
  senderUlid    String   @db.Char(26)
  recipientUlid String   @db.Char(26)
  content       String
  readStatus    String   @default("unread")
  sentAt        DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  recipient     User     @relation("Recipient", fields: [recipientUlid], references: [ulid], onDelete: Cascade)
  sender        User     @relation("Sender", fields: [senderUlid], references: [ulid], onDelete: Cascade)

  @@index([senderUlid])
  @@index([recipientUlid])
}

model Referral {
  ulid         String   @id @db.Char(26)
  referrerUlid String   @db.Char(26)
  refereeUlid  String   @db.Char(26)
  referralCode String   @unique
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  referee      User     @relation("Referee", fields: [refereeUlid], references: [ulid], onDelete: Cascade)
  referrer     User     @relation("Referrer", fields: [referrerUlid], references: [ulid], onDelete: Cascade)

  @@index([referrerUlid])
  @@index([refereeUlid])
}

model Reminder {
  ulid        String   @id @db.Char(26)
  userUlid    String   @db.Char(26)
  sessionUlid String?  @db.Char(26)
  message     String
  remindAt    DateTime
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  session     Session? @relation(fields: [sessionUlid], references: [ulid])
  user        User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@index([sessionUlid])
}

model StripePaymentMethod {
  ulid                  String   @id @db.Char(26)
  userUlid              String   @db.Char(26)
  stripePaymentMethodId String
  type                  String
  isDefault             Boolean  @default(false)
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime @updatedAt @db.Timestamptz(6)
  user                  User     @relation(fields: [userUlid], references: [ulid])

  @@unique([userUlid, stripePaymentMethodId])
  @@index([userUlid])
  @@map("StripePaymentMethod")
}

model SetupIntent {
  ulid                String   @id @db.Char(26)
  userUlid            String   @db.Char(26)
  stripeSetupIntentId String
  status              String
  createdAt           DateTime @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime @updatedAt @db.Timestamptz(6)
  user                User     @relation(fields: [userUlid], references: [ulid])

  @@index([userUlid])
  @@map("SetupIntent")
}

model StripeConnectedAccount {
  ulid               String    @id @db.Char(26)
  userUlid           String    @unique @db.Char(26)
  stripeAccountId    String    @unique
  country            String
  defaultCurrency    String    @default("usd")
  payoutsEnabled     Boolean   @default(false)
  detailsSubmitted   Boolean   @default(false)
  chargesEnabled     Boolean   @default(false)
  requiresOnboarding Boolean   @default(true)
  deauthorizedAt     DateTime? @db.Timestamptz(6)
  createdAt          DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime  @updatedAt @db.Timestamptz(6)
  user               User      @relation(fields: [userUlid], references: [ulid])

  @@map("StripeConnectedAccount")
}

model Transaction {
  ulid                  String   @id @db.Char(26)
  type                  String
  status                String
  amount                Float
  currency              String
  stripePaymentIntentId String?
  stripeTransferId      String?
  platformFee           Float?
  coachPayout           Float?
  sessionUlid           String?  @unique @db.Char(26)
  payerUlid             String   @db.Char(26)
  coachUlid             String   @db.Char(26)
  metadata              Json     @default("{}")
  createdAt             DateTime @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime @updatedAt @db.Timestamptz(6)
  coach                 User     @relation("TransactionCoach", fields: [coachUlid], references: [ulid])
  payer                 User     @relation("TransactionPayer", fields: [payerUlid], references: [ulid])
  session               Session? @relation(fields: [sessionUlid], references: [ulid])

  @@index([payerUlid])
  @@index([coachUlid])
  @@index([sessionUlid])
  @@map("Transaction")
}

model SystemHealth {
  ulid           String   @id @db.Char(26)
  status         Int
  activeSessions Int
  pendingReviews Int
  securityAlerts Int
  uptime         Float
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)

  @@index([createdAt])
  @@map("SystemHealth")
}

model AdminMetrics {
  ulid              String   @id @db.Char(26)
  totalUsers        Int
  activeUsers       Int
  totalCoaches      Int
  activeCoaches     Int
  pendingCoaches    Int
  totalSessions     Int
  completedSessions Int
  totalRevenue      Float
  monthlyRevenue    Float
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt @db.Timestamptz(6)

  @@index([createdAt])
  @@map("AdminMetrics")
}

model SystemActivity {
  ulid        String   @id @db.Char(26)
  type        String
  title       String
  description String
  severity    String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  @@index([type, createdAt])
  @@index([severity, createdAt])
  @@map("SystemActivity")
}

model SystemAlerts {
  ulid      String   @id @db.Char(26)
  type      String
  title     String
  message   String
  severity  String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([type, createdAt])
  @@index([severity, createdAt])
  @@map("SystemAlerts")
}

model AdminActivity {
  ulid        String   @id @db.Char(26)
  type        String
  title       String
  description String
  userUlid    String?  @db.Char(26)
  severity    String
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  @@index([type])
  @@index([createdAt])
  @@map("AdminActivity")
}

model AdminAuditLog {
  ulid       String   @id @db.Char(26)
  adminUlid  String   @db.Char(26)
  action     String
  targetType String
  targetUlid String   @db.Char(26)
  details    Json
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  admin      User     @relation("AdminAuditLogs", fields: [adminUlid], references: [ulid])

  @@index([adminUlid])
  @@index([action])
  @@index([createdAt])
  @@map("AdminAuditLog")
}

model Listing {
  ulid                  String              @id @db.Char(26)
  listingKey            String?             @unique
  parcelNumber          String?             @db.VarChar(50)
  taxLot                String?             @db.VarChar(50)
  taxBlock              String?             @db.VarChar(50)
  taxMapNumber          String?             @db.VarChar(50)
  taxLegalDescription   String?             @db.VarChar(1000)
  propertyType          PropertyType
  propertySubType       PropertySubType?
  status                ListingStatus       @default(Active)
  streetNumber          String              @db.VarChar(25)
  streetName            String              @db.VarChar(50)
  unitNumber            String?             @db.VarChar(25)
  city                  String              @db.VarChar(150)
  stateOrProvince       String              @db.VarChar(50)
  postalCode            String              @db.VarChar(10)
  listPrice             Decimal             @db.Decimal(12, 2)
  originalListPrice     Decimal?            @db.Decimal(12, 2)
  closePrice            Decimal?            @db.Decimal(12, 2)
  listingContractDate   DateTime?           @db.Timestamptz(6)
  closeDate             DateTime?           @db.Timestamptz(6)
  statusChangeTimestamp DateTime?           @db.Timestamptz(6)
  priceChangeTimestamp  DateTime?           @db.Timestamptz(6)
  modificationTimestamp DateTime?           @db.Timestamptz(6)
  createdAt             DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime            @updatedAt @db.Timestamptz(6)
  bedroomsTotal         Int?
  bathroomsTotal        Decimal?            @db.Decimal(3, 1)
  livingArea            Decimal?            @db.Decimal(12, 2)
  lotSize               Decimal?            @db.Decimal(12, 2)
  lotSizeDimensions     String?             @db.VarChar(50)
  lotDimensionsSource   String?             @db.VarChar(50)
  yearBuilt             Int?
  stories               Int?
  architecturalStyle    ArchitecturalStyle?
  basement              BasementType?
  roofType              RoofType?
  view                  ViewType[]
  parkingTotal          Decimal?            @db.Decimal(12, 2)
  garageSpaces          Decimal?            @db.Decimal(12, 2)
  furnished             FurnishedStatus?
  appliances            String[]
  interiorFeatures      String[]
  exteriorFeatures      String[]
  heating               String[]
  cooling               String[]
  isWaterfront          Boolean             @default(false)
  hasFireplace          Boolean             @default(false)
  hasPatio              Boolean             @default(false)
  hasDeck               Boolean             @default(false)
  hasPorch              Boolean             @default(false)
  propertyCondition     PropertyCondition[]
  listingTerms          ListingTerms[]
  listingAgreement      ListingAgreement?
  schoolDistrict        String?             @db.VarChar(100)
  elementarySchool      String?             @db.VarChar(100)
  middleSchool          String?             @db.VarChar(100)
  highSchool            String?             @db.VarChar(100)
  taxYear               Int?
  taxAnnualAmount       Decimal?            @db.Decimal(12, 2)
  hoaName               String?             @db.VarChar(100)
  hoaFeeAmount          Decimal?            @db.Decimal(12, 2)
  hoaFeeFrequency       String?             @db.VarChar(50)
  electricityAvailable  Boolean             @default(true)
  gasAvailable          Boolean             @default(true)
  sewerAvailable        Boolean             @default(true)
  waterAvailable        Boolean             @default(true)
  zoning                String?             @db.VarChar(25)
  zoningDescription     String?             @db.VarChar(255)
  publicRemarks         String?             @db.VarChar(4000)
  privateRemarks        String?             @db.VarChar(4000)
  photos                Json?
  virtualTours          Json?
  isFeatured            Boolean             @default(false)
  featuredOrder         Int?
  mlsLink               String?             @db.VarChar(1000)
  publicListingUrl      String?             @db.VarChar(1000)
  source                String              @default("MANUAL")
  mlsSource             String?
  mlsId                 String?
  realtorProfileUlid    String              @db.Char(26)
  realtorProfile        RealtorProfile      @relation(fields: [realtorProfileUlid], references: [ulid], onDelete: Cascade)

  @@index([realtorProfileUlid])
  @@index([listingKey])
  @@index([status])
  @@index([isFeatured])
  @@map("Listing")
}

model AIThread {
  ulid      String      @id @db.Char(26)
  userUlid  String      @db.Char(26)
  title     String
  category  String
  status    String      @default("ACTIVE")
  createdAt DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt DateTime    @updatedAt @db.Timestamptz(6)
  messages  AIMessage[]
  user      User        @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("AIThread")
}

model AIMessage {
  ulid       String   @id @db.Char(26)
  threadUlid String   @db.Char(26)
  role       String
  content    String
  model      String
  tokens     Int      @default(0)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)
  thread     AIThread @relation(fields: [threadUlid], references: [ulid], onDelete: Cascade)

  @@index([threadUlid])
  @@map("AIMessage")
}

model EnterpriseLeads {
  ulid             String      @id @db.Char(26)
  assignedToUlid   String?     @db.Char(26)
  companyName      String
  website          String?
  industry         OrgIndustry
  fullName         String
  jobTitle         String
  email            String
  phone            String
  teamSize         String
  multipleOffices  Boolean     @default(false)
  status           String      @default("NEW")
  priority         String      @default("MEDIUM")
  notes            Json?
  lastContactedAt  DateTime?
  nextFollowUpDate DateTime?
  metadata         Json?
  createdAt        DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime    @updatedAt @db.Timestamptz(6)
  assignedTo       User?       @relation("AssignedLeads", fields: [assignedToUlid], references: [ulid])

  @@index([assignedToUlid])
  @@map("EnterpriseLeads")
}

model Settings {
  ulid        String   @id @db.Char(26)
  key         String   @unique
  value       Json
  description String?
  metadata    Json?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  @@map("Settings")
}

model Goal {
  ulid             String     @id @db.Char(26)
  userUlid         String     @db.Char(26)
  organizationUlid String?    @db.Char(26)
  type             GoalType
  status           GoalStatus @default(IN_PROGRESS)
  title            String
  description      String?
  target           Json?
  progress         Json?
  startDate        DateTime   @db.Timestamptz(6)
  dueDate          DateTime   @db.Timestamptz(6)
  completedAt      DateTime?  @db.Timestamptz(6)
  milestones       Json?      @db.JsonB
  growthPlan       String?
  createdAt        DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime   @updatedAt @db.Timestamptz(6)
  user             User       @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  organization     Organization? @relation(fields: [organizationUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@index([organizationUlid])
  @@map("Goal")
}

model ProfessionalRecognition {
  ulid            String          @id @db.Char(26)
  userUlid        String          @db.Char(26)
  coachUlid       String?         @db.Char(26)
  type            RecognitionType
  title           String
  description     String?
  issuer          String?
  issueDate       DateTime        @db.Timestamptz(6)
  expiryDate      DateTime?       @db.Timestamptz(6)
  verificationUrl String?
  metadata        Json?
  createdAt       DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime        @updatedAt @db.Timestamptz(6)
  industryType    String?
  isVisible       Boolean         @default(true)
  coach           CoachProfile?   @relation(fields: [coachUlid], references: [ulid])
  user            User            @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@index([industryType])
  @@map("ProfessionalRecognition")
}

model Subscription {
  ulid                 String             @id @db.Char(26)
  userUlid             String?            @db.Char(26)
  organizationUlid     String?            @db.Char(26)
  stripeSubscriptionId String             @unique
  status               String
  planType             PlanType
  currentPeriodStart   DateTime           @db.Timestamptz(6)
  currentPeriodEnd     DateTime           @db.Timestamptz(6)
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?          @db.Timestamptz(6)
  metadata             Json?
  totalSeats           Int                @default(1)
  usedSeats            Int                @default(0)
  seatPrice            Decimal?           @db.Decimal(10, 2)
  billingCycle         String             @default("monthly")
  billingDay           Int?
  autoRenew            Boolean            @default(true)
  createdAt            DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime           @updatedAt @db.Timestamptz(6)
  invoices             Invoice[]
  organization         Organization?      @relation(fields: [organizationUlid], references: [ulid])
  user                 User?              @relation(fields: [userUlid], references: [ulid])
  seatLicenses         SeatLicense[]
  budgetAllocations    BudgetAllocation[]
  billingEvents        BillingEvent[]

  @@index([userUlid])
  @@index([organizationUlid])
  @@map("Subscription")
}

model SeatLicense {
  ulid               String       @id @db.Char(26)
  subscriptionUlid   String       @db.Char(26)
  userUlid           String       @db.Char(26)
  status             String       @default("active")
  assignedByUserUlid String?      @db.Char(26)
  departmentName     String?
  teamName           String?
  metadata           Json?
  assignedAt         DateTime     @default(now()) @db.Timestamptz(6)
  revokedAt          DateTime?    @db.Timestamptz(6)
  createdAt          DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime     @updatedAt @db.Timestamptz(6)
  subscription       Subscription @relation(fields: [subscriptionUlid], references: [ulid], onDelete: Cascade)
  user               User         @relation("licensedUser", fields: [userUlid], references: [ulid])
  assignedBy         User?        @relation("licenseAssigner", fields: [assignedByUserUlid], references: [ulid])

  @@unique([subscriptionUlid, userUlid])
  @@index([subscriptionUlid])
  @@index([userUlid])
  @@index([assignedByUserUlid])
  @@index([status])
  @@map("SeatLicense")
}

model BudgetAllocation {
  ulid             String       @id @db.Char(26)
  subscriptionUlid String       @db.Char(26)
  name             String
  type             String
  targetUlid       String?      @db.Char(26)
  amount           Decimal      @db.Decimal(10, 2)
  spent            Decimal      @default(0) @db.Decimal(10, 2)
  startDate        DateTime     @db.Timestamptz(6)
  endDate          DateTime     @db.Timestamptz(6)
  autoRenew        Boolean      @default(true)
  metadata         Json?
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(6)
  subscription     Subscription @relation(fields: [subscriptionUlid], references: [ulid], onDelete: Cascade)
  user             User?        @relation(fields: [targetUlid], references: [ulid])

  @@index([subscriptionUlid])
  @@index([targetUlid])
  @@index([type])
  @@map("BudgetAllocation")
}

model PaymentMethod {
  ulid              String       @id @db.Char(26)
  userUlid          String?      @db.Char(26)
  organizationUlid  String?      @db.Char(26)
  stripePaymentId   String       @unique
  type              PaymentMethodType
  isDefault         Boolean      @default(false)
  last4             String
  brand             String?
  expMonth          Int?
  expYear           Int?
  country           String?
  billingAddress    Json?
  metadata          Json?
  createdAt         DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime     @updatedAt @db.Timestamptz(6)
  user              User?        @relation(fields: [userUlid], references: [ulid])
  organization      Organization? @relation(fields: [organizationUlid], references: [ulid])
  billingEvents     BillingEvent[]

  @@index([userUlid])
  @@index([organizationUlid])
  @@index([isDefault])
  @@map("PaymentMethod")
}

model BillingEvent {
  ulid              String        @id @db.Char(26)
  subscriptionUlid  String?       @db.Char(26)
  paymentMethodUlid String?       @db.Char(26)
  organizationUlid  String?       @db.Char(26)
  userUlid          String?       @db.Char(26)
  type              String
  amount            Decimal?      @db.Decimal(10, 2)
  description       String
  metadata          Json?
  createdAt         DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime      @updatedAt @db.Timestamptz(6)
  subscription      Subscription? @relation(fields: [subscriptionUlid], references: [ulid])
  paymentMethod     PaymentMethod? @relation(fields: [paymentMethodUlid], references: [ulid], onDelete: SetNull)
  organization      Organization? @relation(fields: [organizationUlid], references: [ulid])
  user              User?         @relation(fields: [userUlid], references: [ulid])

  @@index([subscriptionUlid])
  @@index([paymentMethodUlid])
  @@index([organizationUlid])
  @@index([userUlid])
  @@index([type])
  @@index([createdAt])
  @@map("BillingEvent")
}

model Invoice {
  ulid             String       @id @db.Char(26)
  subscriptionUlid String       @db.Char(26)
  stripeInvoiceId  String       @unique
  amount           Decimal      @db.Decimal(10, 2)
  currency         String
  status           String
  dueDate          DateTime     @db.Timestamptz(6)
  paidAt           DateTime?    @db.Timestamptz(6)
  metadata         Json?
  userUlid         String?      @db.Char(26)
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(6)
  subscription     Subscription @relation(fields: [subscriptionUlid], references: [ulid], onDelete: Cascade)
  user             User?        @relation(fields: [userUlid], references: [ulid])

  @@index([subscriptionUlid])
  @@index([userUlid])
  @@map("Invoice")
}

model CoachingAvailabilitySchedule {
  ulid            String    @id @db.Char(26)
  userUlid        String    @db.Char(26)
  name            String
  timeZone        String    // Changed from "timezone" to "timeZone" to match Cal.com API
  calScheduleId   Int?      // Explicit field instead of nested in JSON
  availability    Json      // Store the availability array directly
  overrides       Json?     // Store date-specific overrides
  syncSource      String    @default("LOCAL") // Tracks where the schedule originated: LOCAL, CALCOM, SYNCED
  lastSyncedAt    DateTime? // When the schedule was last synced with Cal.com
  isDefault       Boolean   @default(false)
  active          Boolean   @default(true)
  
  // Session related fields
  allowCustomDuration Boolean  @default(true)
  defaultDuration     Int      @default(60)
  maximumDuration     Int      @default(120)
  minimumDuration     Int      @default(30)
  bufferAfter         Int      @default(0)
  bufferBefore        Int      @default(0)
  
  // Optional fields
  averageRating       Decimal? @db.Decimal(3, 2)
  totalSessions       Int      @default(0)
  
  // Integration related fields
  zoomEnabled         Boolean  @default(false)
  calendlyEnabled     Boolean  @default(false)
  
  createdAt           DateTime @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime @updatedAt @db.Timestamptz(6)
  user                User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@index([calScheduleId]) // Add index for better lookup by Cal.com schedule ID
  @@unique([userUlid, calScheduleId]) // Each user can only have one schedule per Cal schedule ID
  @@map("CoachingAvailabilitySchedule")
}

enum UserRole {
  SYSTEM_OWNER
  SYSTEM_MODERATOR
  USER
}

enum UserCapability {
  COACH
  MENTEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrgType {
  INDIVIDUAL
  TEAM
  BUSINESS
  ENTERPRISE
  FRANCHISE
  NETWORK
}

enum OrgIndustry {
  REAL_ESTATE_SALES
  MORTGAGE_LENDING
  PROPERTY_MANAGEMENT
  REAL_ESTATE_INVESTMENT
  TITLE_ESCROW
  INSURANCE
  COMMERCIAL
  PRIVATE_CREDIT
  OTHER
}

enum OrgStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  ARCHIVED
}

enum OrgTier {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
  PARTNER
}

enum OrgRole {
  GLOBAL_OWNER
  GLOBAL_DIRECTOR
  GLOBAL_MANAGER
  REGIONAL_OWNER
  REGIONAL_DIRECTOR
  REGIONAL_MANAGER
  LOCAL_OWNER
  LOCAL_DIRECTOR
  LOCAL_MANAGER
  OWNER
  DIRECTOR
  MANAGER
  MEMBER
  GUEST
}

enum OrgLevel {
  GLOBAL
  REGIONAL
  LOCAL
  BRANCH
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum RealEstateDomain {
  REALTOR
  INVESTOR
  MORTGAGE
  PROPERTY_MANAGER
  TITLE_ESCROW
  INSURANCE
  COMMERCIAL
  PRIVATE_CREDIT
}

enum DomainStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum VerificationType {
  LICENSE
  CERTIFICATION
  EMPLOYMENT
  REFERENCE
  BACKGROUND_CHECK
  DOCUMENT
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  REVOKED
  PENDING
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SessionType {
  PEER_TO_PEER
  MENTORSHIP
  GROUP
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethodType {
  credit_card
  debit_card
  bank_transfer
}

enum PayoutStatus {
  PENDING
  PROCESSED
  FAILED
}

enum RefundStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Currency {
  USD
  EUR
  GBP
}

enum PlanType {
  INDIVIDUAL
  TEAM
  ENTERPRISE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CoachApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  HIDDEN
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum GoalType {
  sales_volume
  commission_income
  gci
  avg_sale_price
  listings
  buyer_transactions
  closed_deals
  days_on_market
  coaching_sessions
  group_sessions
  session_revenue
  active_mentees
  mentee_satisfaction
  response_time
  session_completion
  mentee_milestones
  new_clients
  referrals
  client_retention
  reviews
  market_share
  territory_expansion
  social_media
  website_traffic
  certifications
  training_hours
  networking_events
  custom
}

enum RecognitionType {
  AWARD
  ACHIEVEMENT
  CERTIFICATION
  DESIGNATION
  LICENSE
  EDUCATION
  MEMBERSHIP
}

enum ActivityType {
  USER
  COACH
  SYSTEM
  SECURITY
}

enum ActivitySeverity {
  INFO
  WARNING
  ERROR
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum DisputeStatus {
  OPEN
  RESOLVED
  REJECTED
}

enum ListingStatus {
  Active
  ActiveUnderContract
  Canceled
  Closed
  ComingSoon
  Delete
  Expired
  Hold
  Incomplete
  Pending
  Withdrawn
}

enum PropertyType {
  BusinessOpportunity
  CommercialLease
  CommercialSale
  Farm
  Land
  ManufacturedInPark
  Residential
}

enum PropertySubType {
  Apartment
  Cabin
  Condominium
  Duplex
  ManufacturedHome
  SingleFamilyDetached
  SingleFamilyAttached
  Mobile
  Townhouse
  Triplex
  Quadruplex
  Hotel
  CommercialIndustrial
  CommercialMixedUse
  MultiFamily
  Office
  Retail
  Restaurant
  Warehouse
  AgriculturalLand
  CommercialLand
  IndustrialLand
  LandMixedUse
  ResidentialLand
  Equestrian
  Ranch
  TimberLand
  Vineyard
  BusinessOnly
  BusinessWithProperty
  BusinessWithRealEstate
  DoubleWide
  SingleWide
  TripleWide
  Other
}

enum FurnishedStatus {
  Furnished
  Negotiable
  Partially
  Unfurnished
}

enum PropertyCondition {
  Excellent
  Good
  Fair
  NeedsWork
  Renovated
  Updated
}

enum ListingTerms {
  Cash
  Conventional
  FHA
  OwnerFinancing
  VA
}

enum ListingAgreement {
  Exclusive
  OpenListing
  PocketListing
}

enum ArchitecturalStyle {
  Colonial
  Contemporary
  Craftsman
  Mediterranean
  Modern
  Ranch
  Traditional
  Victorian
}

enum BasementType {
  Finished
  Partially
  Unfinished
  None
}

enum RoofType {
  Asphalt
  Metal
  Slate
  Tile
  Wood
}

enum ViewType {
  City
  Golf
  Lake
  Mountain
  Ocean
  Park
  River
  Woods
}

enum SocialMediaPlatform {
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  TWITTER
  TIKTOK
  PINTEREST
  OTHER
}

enum LoanType {
  CONVENTIONAL
  FHA
  VA
  USDA
  JUMBO
  REVERSE
  CONSTRUCTION
  COMMERCIAL
  HELOC
  OTHER
}

enum InvestmentStrategy {
  FIX_AND_FLIP
  BUY_AND_HOLD
  WHOLESALE
  COMMERCIAL
  MULTIFAMILY
  LAND_DEVELOPMENT
  REIT
  SYNDICATION
  OTHER
}

enum PropertyManagerType {
  RESIDENTIAL
  COMMERCIAL
  MIXED_USE
  VACATION_RENTAL
  HOA
  STUDENT_HOUSING
  SENIOR_LIVING
  OTHER
}

enum TitleEscrowType {
  TITLE_AGENT
  ESCROW_OFFICER
  CLOSING_AGENT
  TITLE_EXAMINER
  UNDERWRITER
  OTHER
}

enum InsuranceType {
  PROPERTY_CASUALTY
  TITLE_INSURANCE
  ERRORS_OMISSIONS
  LIABILITY
  HOMEOWNERS
  FLOOD
  OTHER
}

enum Language {
  en
  es
  zh
  tl
  vi
  ar
  fr
  ko
  ru
  de
  hi
  pt
  it
  ja
}

enum CommercialPropertyType {
  OFFICE
  RETAIL
  INDUSTRIAL
  MULTIFAMILY
  MIXED_USE
  LAND
  HOTEL
  MEDICAL
  SELF_STORAGE
  OTHER
}

enum CommercialDealType {
  SALES
  LEASING
  INVESTMENT
  DEVELOPMENT
  PROPERTY_MANAGEMENT
  CONSULTING
}

enum PrivateCreditLoanType {
  BRIDGE
  CONSTRUCTION
  VALUE_ADD
  ACQUISITION
  REFINANCE
  MEZZANINE
  PREFERRED_EQUITY
  OTHER
}

enum ProfileStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model TrainingResource {
  id             String   @id @default(uuid())
  title          String
  description    String
  type           String
  access         String
  url            String?
  thumbnail      String?
  partner        String?
  status         String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  organizationId String?  @map("organization_id")
  createdById    String   @map("created_by_id")
  organization   Organization? @relation(fields: [organizationId], references: [ulid])
  createdBy      User          @relation(fields: [createdById], references: [ulid])
  domains        ResourceDomain[]
  assignments    ResourceAssignment[]
  sections       CourseSection[]

  @@map("TrainingResource")
}

model ResourceDomain {
  id          String           @id @default(uuid())
  domain      String
  resourceId  String           @map("resource_id")
  resource    TrainingResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([resourceId, domain])
  @@map("ResourceDomain")
}

model ResourceAssignment {
  id           String           @id @default(uuid())
  resourceId   String           @map("resource_id")
  userId       String           @map("user_id")
  assignedById String           @map("assigned_by_id")
  assignedAt   DateTime         @default(now()) @map("assigned_at")
  dueDate      DateTime?        @map("due_date")
  status       String           @default("assigned")
  completedAt  DateTime?        @map("completed_at")
  resource     TrainingResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user         User             @relation("UserAssignments", fields: [userId], references: [ulid], onDelete: Cascade)
  assignedBy   User             @relation("AssignedByUser", fields: [assignedById], references: [ulid])

  @@unique([resourceId, userId])
  @@map("ResourceAssignment")
}

model CourseSection {
  id          String           @id @default(uuid())
  title       String
  description String?
  order       Int
  resourceId  String           @map("resource_id")
  content     String?
  videoUrl    String?          @map("video_url")
  duration    Int?
  resource    TrainingResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@map("CourseSection")
}

model FeatureWaitlist {
  id             String       @id @default(uuid())
  email          String
  feature_id     String
  user_id        String?      @db.Char(26)
  organization_id String?     @db.Char(26)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  user           User?        @relation(fields: [user_id], references: [ulid])
  organization   Organization? @relation(fields: [organization_id], references: [ulid])

  @@unique([email, feature_id])
  @@index([organization_id])
  @@index([feature_id])
  @@index([user_id])
  @@map("FeatureWaitlist")
}

model CalendarIntegration {
  ulid                    String           @id @db.Char(26)
  userUlid                String           @unique @db.Char(26)
  provider                String           @default("CAL")
  calManagedUserId        Int
  calUsername             String
  calAccessToken          String
  calRefreshToken         String
  calAccessTokenExpiresAt DateTime
  defaultScheduleId       Int?
  timeZone                String?
  weekStart               String?
  timeFormat              Int?
  locale                  String?
  lastSyncedAt            DateTime?
  syncEnabled             Boolean          @default(true)
  googleCalendarConnected Boolean?         @default(false)
  office365CalendarConnected Boolean?      @default(false)
  createdAt               DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime         @updatedAt @db.Timestamptz(6)
  user                    User             @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  eventTypes              CalEventType[]

  @@index([userUlid])
  @@index([provider])
  @@map("CalendarIntegration")
}

model CalEventType {
  ulid                     String              @id @db.Char(26)
  calendarIntegrationUlid  String              @db.Char(26)
  calEventTypeId           Int?                // ID from Cal.com API
  name                     String
  description              String?
  slug                     String?
  lengthInMinutes          Int                 // Duration in minutes - matches Cal.com API
  hidden                   Boolean             @default(false)
  position                 Int?                // for ordering
  isDefault                Boolean             @default(false)
  price                    Decimal?            @db.Decimal(10, 2)
  currency                 String?             @default("USD")
  isFree                   Boolean             @default(false)
  scheduling               CalSchedulingType   @default(MANAGED)
  bookingLimits            Json?               // Store max bookings per day/week/month
  minimumBookingNotice     Int?                // in minutes
  requiresConfirmation     Boolean             @default(false)
  metadata                 Json?               // For additional data
  isActive                 Boolean             @default(true)
  // New fields for Office Hours and Group Sessions
  maxParticipants          Int?                // Maximum number of participants (for OFFICE_HOURS and GROUP_SESSION)
  discountPercentage       Int?                // Discount percentage for OFFICE_HOURS (0-100)
  organizationUlid         String?             @db.Char(26) // Organization that owns the GROUP_SESSION
  // New Cal.com v2 API fields
  locations                Json?               // Store locations array
  bookerLayouts            Json?               // Store layouts configuration
  beforeEventBuffer        Int?                // Buffer time before event in minutes
  afterEventBuffer         Int?                // Buffer time after event in minutes
  slotInterval             Int?                // Custom slot interval in minutes
  successRedirectUrl       String?             // URL to redirect after successful booking
  disableGuests            Boolean?            // Whether guests are allowed in the booking
  customName               String?             // Custom name format for the event
  useDestinationCalendarEmail Boolean?         // Use destination calendar email for the event
  hideCalendarEventDetails Boolean?            // Hide calendar event details
  color                    Json?               // Color settings for the event
  createdAt                DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime            @updatedAt @db.Timestamptz(6)
  calendarIntegration      CalendarIntegration @relation(fields: [calendarIntegrationUlid], references: [ulid], onDelete: Cascade)

  @@unique([calendarIntegrationUlid, calEventTypeId])
  @@index([calendarIntegrationUlid])
  @@index([isDefault])
  @@index([isActive])
  @@map("CalEventType")
}

enum CalSchedulingType {
  MANAGED
  OFFICE_HOURS
  GROUP_SESSION
}

model CalBooking {
  ulid               String    @id @db.Char(26)
  userUlid           String    @db.Char(26)
  calBookingUid      String    @unique
  title              String
  description        String?
  startTime          DateTime  @db.Timestamptz(6)
  endTime            DateTime  @db.Timestamptz(6)
  attendeeEmail      String
  attendeeName       String?
  allAttendees       String?
  status             String    @default("CONFIRMED")
  cancellationReason String?
  metadata           Json?     @default("{}")
  createdAt          DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime  @updatedAt @db.Timestamptz(6)
  user               User      @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@index([status])
  @@index([startTime])
  @@map("CalBooking")
}

enum ZoomSessionStatus {
  SCHEDULED
  STARTED
  ENDED
  CANCELLED
}

model ZoomSession {
  ulid        String   @id @db.Char(26)
  sessionUlid String   @unique @db.Char(26)
  sessionName String
  hostUlid    String   @db.Char(26)
  startUrl    String?
  joinUrl     String?
  status      String   @default("SCHEDULED")
  metadata    Json?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  session     Session  @relation(fields: [sessionUlid], references: [ulid], onDelete: Cascade)

  @@index([sessionUlid])
  @@map("ZoomSession")
}
