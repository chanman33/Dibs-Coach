generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User & Role Enums
enum UserRole {
  SYSTEM_OWNER      // Full system access: User management, system configuration, analytics, billing
  SYSTEM_MODERATOR  // Limited system access: Content moderation, support tickets, basic user management
  USER              // Standard user with basic platform access
}

// User capabilities (can have multiple)
enum UserCapability {
  COACH    // Can provide coaching services
  MENTEE   // Can receive coaching services
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrgType {
  INDIVIDUAL    // Single professional
  TEAM         // Small team
  BUSINESS     // Small to medium business
  ENTERPRISE   // Large organization
  FRANCHISE    // Franchise operation
  NETWORK      // Network of affiliated businesses
}

// New enum for industry types
enum OrgIndustry {
  REAL_ESTATE_SALES     // Real estate brokerage and sales
  MORTGAGE_LENDING      // Mortgage and lending services
  PROPERTY_MANAGEMENT   // Property management services
  REAL_ESTATE_INVESTMENT // Real estate investment
  TITLE_ESCROW         // Title and escrow services
  INSURANCE            // Real estate insurance
  OTHER               // Other real estate related services
}

enum OrgStatus {
  ACTIVE        // Fully operational
  INACTIVE      // Temporarily suspended
  SUSPENDED     // Administratively suspended
  PENDING       // Awaiting approval/setup
  ARCHIVED      // Historical record
}

enum OrgTier {
  FREE          // Basic features
  STARTER       // Essential features
  PROFESSIONAL  // Full feature set
  ENTERPRISE    // Custom solutions
  PARTNER       // Special partner tier
}

enum OrgRole {
  // Global Level Roles
  GLOBAL_OWNER         // Full system access across all organizations
  GLOBAL_DIRECTOR      // Strategic oversight across regions
  GLOBAL_MANAGER       // Cross-regional program management
  
  // Regional Level Roles
  REGIONAL_OWNER       // Regional strategic leadership
  REGIONAL_DIRECTOR    // Regional operations oversight
  REGIONAL_MANAGER     // Regional operations management
  
  // Local Level Roles
  LOCAL_OWNER          // Local office ownership/leadership
  LOCAL_DIRECTOR       // Local office direction
  LOCAL_MANAGER        // Local team/office management
  
  // Standard Roles
  OWNER               // Organization owner
  DIRECTOR            // Organization director
  MANAGER             // Team/department manager
  MEMBER              // Standard member
  GUEST               // Limited access member
}

enum OrgLevel {
  GLOBAL      // Parent company (e.g., REMAX, COMPASS)
  REGIONAL    // Regional operations (e.g., Western US)
  LOCAL       // Local operations (e.g., Utah Real Estate)
  BRANCH      // Branch/satellite office
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

// Domain Expertise Enums
enum DomainType {
  REALTOR
  LOAN_OFFICER
  TITLE_OFFICER
  PROPERTY_MANAGER
  INVESTOR
}

enum DomainStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum VerificationType {
  LICENSE
  CERTIFICATION
  EMPLOYMENT
  REFERENCE
  BACKGROUND_CHECK
  DOCUMENT
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  REVOKED
  PENDING
}

// Session & Payment Enums
enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SessionType {
  PEER_TO_PEER
  MENTORSHIP
  GROUP
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  credit_card
  debit_card
  bank_transfer
}

enum PayoutStatus {
  PENDING
  PROCESSED
  FAILED
}

enum RefundStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Currency {
  USD
  EUR
  GBP
}

// Subscription & Plan Enums
enum PlanType {
  INDIVIDUAL
  TEAM
  ENTERPRISE
}

// Application & Review Enums
enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CoachApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  HIDDEN
}

// Goal & Achievement Enums
enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum GoalType {
  // Financial Goals
  sales_volume
  commission_income
  gci
  avg_sale_price
  
  // Transaction Goals
  listings
  buyer_transactions
  closed_deals
  days_on_market
  
  // Coaching & Mentorship Goals
  coaching_sessions
  group_sessions
  session_revenue
  active_mentees
  mentee_satisfaction
  response_time
  session_completion
  mentee_milestones
  
  // Client Goals
  new_clients
  referrals
  client_retention
  reviews
  
  // Market Presence
  market_share
  territory_expansion
  social_media
  website_traffic
  
  // Professional Development
  certifications
  training_hours
  networking_events
  
  // Other
  custom
}

enum AchievementType {
  MILESTONE
  PERFORMANCE
  LEARNING
}

enum RecognitionType {
  AWARD        // e.g., "Top Producer Award"
  ACHIEVEMENT  // e.g., "Sold $10M in Properties"
}

// System & Activity Enums
enum ActivityType {
  USER
  COACH
  SYSTEM
  SECURITY
}

enum ActivitySeverity {
  INFO
  WARNING
  ERROR
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum DisputeStatus {
  OPEN
  RESOLVED
  REJECTED
}

// Property & Listing Enums
enum ListingStatus {
  Active
  ActiveUnderContract
  Canceled
  Closed
  ComingSoon
  Delete
  Expired
  Hold
  Incomplete
  Pending
  Withdrawn
}

enum PropertyType {
  BusinessOpportunity
  CommercialLease
  CommercialSale
  Farm
  Land
  ManufacturedInPark
  Residential
}

enum PropertySubType {
  // Residential subtypes
  Apartment
  Cabin
  Condominium
  Duplex
  ManufacturedHome
  SingleFamilyDetached
  SingleFamilyAttached
  Mobile
  Townhouse
  Triplex
  Quadruplex
  
  // Commercial subtypes
  Hotel
  CommercialIndustrial
  CommercialMixedUse
  MultiFamily
  Office
  Retail
  Restaurant
  Warehouse
  
  // Land subtypes
  AgriculturalLand
  CommercialLand
  IndustrialLand
  LandMixedUse
  ResidentialLand
  
  // Farm subtypes
  Equestrian
  Ranch
  TimberLand
  Vineyard
  
  // Business Opportunity subtypes
  BusinessOnly
  BusinessWithProperty
  BusinessWithRealEstate
  
  // ManufacturedInPark subtypes
  DoubleWide
  SingleWide
  TripleWide
  
  // Other
  Other
}

enum FurnishedStatus {
  Furnished
  Negotiable
  Partially
  Unfurnished
}

enum PropertyCondition {
  Excellent
  Good
  Fair
  NeedsWork
  Renovated
  Updated
}

enum ListingTerms {
  Cash
  Conventional
  FHA
  OwnerFinancing
  VA
}

enum ListingAgreement {
  Exclusive
  OpenListing
  PocketListing
}

enum ArchitecturalStyle {
  Colonial
  Contemporary
  Craftsman
  Mediterranean
  Modern
  Ranch
  Traditional
  Victorian
}

enum BasementType {
  Finished
  Partially
  Unfinished
  None
}

enum RoofType {
  Asphalt
  Metal
  Slate
  Tile
  Wood
}

enum ViewType {
  City
  Golf
  Lake
  Mountain
  Ocean
  Park
  River
  Woods
}

// Add after the existing enums
enum SocialMediaPlatform {
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  TWITTER
  TIKTOK
  PINTEREST
  OTHER
}

// Add new enums for loan officer, investor, and property manager
enum LoanType {
  CONVENTIONAL
  FHA
  VA
  USDA
  JUMBO
  REVERSE
  CONSTRUCTION
  COMMERCIAL
  HELOC
  OTHER
}

enum InvestmentStrategy {
  FIX_AND_FLIP
  BUY_AND_HOLD
  WHOLESALE
  COMMERCIAL
  MULTIFAMILY
  LAND_DEVELOPMENT
  REIT
  SYNDICATION
  OTHER
}

enum PropertyManagerType {
  RESIDENTIAL
  COMMERCIAL
  MIXED_USE
  VACATION_RENTAL
  HOA
  STUDENT_HOUSING
  SENIOR_LIVING
  OTHER
}

// Add new enums for Title/Escrow and Insurance
enum TitleEscrowType {
  TITLE_AGENT
  ESCROW_OFFICER
  CLOSING_AGENT
  TITLE_EXAMINER
  UNDERWRITER
  OTHER
}

enum InsuranceType {
  PROPERTY_CASUALTY
  TITLE_INSURANCE
  ERRORS_OMISSIONS
  LIABILITY
  HOMEOWNERS
  FLOOD
  OTHER
}

// Profile status enum
enum ProfileStatus {
  DRAFT     // Profile is incomplete or being edited
  REVIEW    // Profile is complete and awaiting review
  PUBLISHED // Profile is approved and publicly visible
}

// Models
model User {
  ulid                   String   @id @db.Char(26)
  userId                 String   @unique // Clerk ID
  email                  String   @unique
  firstName              String?
  lastName               String?
  phoneNumber            String?
  displayName            String?
  bio                    String?  @db.Text  // Added bio field
  systemRole            UserRole  @default(USER)
  capabilities          UserCapability[] // Add capabilities field
  isCoach               Boolean   @default(false)  // Quick access flag
  isMentee              Boolean   @default(false)  // Quick access flag
  stripeCustomerId       String?  @unique
  stripeConnectAccountId String?  @unique
  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  // Application-specific fields
  status               UserStatus @default(ACTIVE)
  profileImageUrl      String?

  // Industry specialties - direct access for better extensibility
  industrySpecialties  String[]  @default([]) // e.g., ["REALTOR", "INVESTOR"]
  confirmedSpecialties String[]  @default([]) // Specialties that have been verified/confirmed
  primaryMarket        String?   // User's primary market/location

  // Profile Relations
  realtorProfile       RealtorProfile?
  loanOfficerProfile   LoanOfficerProfile?
  investorProfile      InvestorProfile?
  propertyManagerProfile PropertyManagerProfile?
  titleEscrowProfile    TitleEscrowProfile?
  insuranceProfile     InsuranceProfile?
  menteeProfile         MenteeProfile?
  coachProfile          CoachProfile?

  // Existing integrations
  calendlyIntegration CalendlyIntegration?
  coachingSchedules   CoachingAvailabilitySchedule[]

  // Session Relations
  sessions             Session[]               @relation("UserSessions")
  coachingSessions     Session[]               @relation("CoachSessions")
  paymentMethods       StripePaymentMethod[]
  setupIntents         SetupIntent[]
  stripeAccount        StripeConnectedAccount?
  sentTransactions     Transaction[]           @relation("TransactionPayer")
  receivedTransactions Transaction[]           @relation("TransactionCoach")

  // Keep existing relations
  paymentsMade     Payment[]     @relation("Payer")
  paymentsReceived Payment[]     @relation("Payee")
  payouts          Payout[]      @relation("PayoutPayee")
  reviewsGiven     Review[]      @relation("Reviewer")
  reviewsReceived  Review[]      @relation("Reviewee")
  goals            Goal[]
  achievements     Achievement[]

  // Message Relations
  messagesSent     Message[] @relation("Sender")
  messagesReceived Message[] @relation("Recipient")
  aiThreads        AIThread[]

  // Referral Relations
  referralsGiven    Referral[] @relation("Referrer")
  referralsReceived Referral[] @relation("Referee")

  // Other Relations
  applications         CoachApplication[] @relation("Applicant")
  reviewedApplications CoachApplication[] @relation("Reviewer")
  authoredNotes        Note[]             @relation("AuthorNotes")
  relatedNotes         Note[]             @relation("RelatedUserNotes")
  reminders            Reminder[]
  supportTickets       SupportTicket[]    @relation("UserSupportTickets")
  subscriptions        Subscription[]
  invoices             Invoice[]
  calendlyEvents       CalendlyEvent[]

  // Admin relations
  adminAuditLogs       AdminAuditLog[]    @relation("AdminAuditLogs")

  // Organization Relations
  organizationMemberships OrganizationMember[]
  
  // Domain Expertise Relations
  domainExpertise        DomainExpertise[]
  domainVerifications    DomainVerification[]
  professionalRecognitions ProfessionalRecognition[]

  // New fields
  marketingProfile       MarketingProfile?

  @@index([userId])
  @@index([email])
  @@index([systemRole])
  @@index([isCoach])
  @@index([isMentee])
  @@index([status])
  @@index([industrySpecialties])
  @@index([confirmedSpecialties])
  @@map("User")
}

// Mentee-specific profile data
model MenteeProfile {
  ulid               String   @id @db.Char(26)
  userUlid           String   @unique @db.Char(26)
  focusAreas         String[]
  experienceLevel    String?
  learningStyle      String?
  sessionsCompleted  Int      @default(0)
  isActive           Boolean  @default(true)
  lastSessionDate    DateTime?

  // Relations
  user               User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  domainExpertise    DomainExpertise[]

  createdAt          DateTime @default(now()) @db.Timestamptz
  updatedAt          DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@map("MenteeProfile")
}

// Coach-specific profile data
model CoachProfile {
  ulid                String       @id @db.Char(26)
  userUlid            String       @unique @db.Char(26)
  coachingSpecialties String[]
  yearsCoaching        Int?
  hourlyRate          Decimal?     @db.Decimal(10, 2)

  // Calendly Integration
  calendlyUrl         String?
  eventTypeUrl        String?

  // Session Configuration
  isActive            Boolean      @default(true)
  defaultDuration     Int          @default(60)
  allowCustomDuration Boolean      @default(false)
  minimumDuration     Int          @default(30)
  maximumDuration     Int          @default(120)
  totalSessions       Int          @default(0)
  averageRating       Decimal?     @db.Decimal(3, 2)
  
  // Profile Visibility
  profileStatus       ProfileStatus @default(DRAFT)
  completionPercentage Int          @default(0)

  // Relations
  user               User          @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  professionalRecognitions ProfessionalRecognition[]
  domainExpertise    DomainExpertise[]

  createdAt          DateTime      @default(now()) @db.Timestamptz
  updatedAt          DateTime      @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@index([profileStatus])
  @@map("CoachProfile")
}

// Organization and Team Management Models
model Organization {
  ulid                String   @id @db.Char(26)
  name                String
  description         String?
  status             String    @default("ACTIVE")
  type               OrgType   @default(INDIVIDUAL)
  industry           OrgIndustry? // New field for industry type
  level              OrgLevel  @default(LOCAL)
  tier               OrgTier   @default(FREE)
  parentUlid         String?   @db.Char(26)
  metadata           Json?     @db.JsonB
  
  // Domain-specific fields
  primaryDomain      DomainType?  // Primary business focus
  licenseNumbers     Json?     @db.JsonB  // Store multiple licenses by state/type
  serviceAreas       String[]  // Geographic service areas
  specializations    String[]  // Domain-specific specializations
  certifications     String[]  // Professional certifications
  
  // Business metrics
  totalTransactions  Int?      // Total number of transactions
  transactionVolume  Decimal?  @db.Decimal(12,2)  // Total transaction volume
  activeAgents       Int?      // Number of active agents/officers
  
  // Existing relations
  rolePermissions    RolePermission[]
  members            OrganizationMember[]
  subscriptions      Subscription[]
  
  // New relations for hierarchy
  parent             Organization?  @relation("OrganizationHierarchy", fields: [parentUlid], references: [ulid])
  children           Organization[] @relation("OrganizationHierarchy")
  
  // Add the regions relation
  regions            Region[]
  
  // Existing timestamps
  createdAt          DateTime     @default(now()) @db.Timestamptz
  updatedAt          DateTime     @updatedAt @db.Timestamptz

  // New fields
  marketingProfile   MarketingProfile?

  @@index([status])
  @@index([type])
  @@index([level])
  @@index([parentUlid])
  @@index([primaryDomain])
  @@map("Organization")
}

// Optional: Add a Region model for better geographic organization
model Region {
  ulid              String   @id @db.Char(26)
  organizationUlid  String   @db.Char(26)
  name              String
  type              String   // e.g., "STATE", "METRO_AREA", "COUNTRY"
  parentUlid        String?  @db.Char(26)
  metadata          Json?    @db.JsonB
  
  organization      Organization @relation(fields: [organizationUlid], references: [ulid], onDelete: Cascade)
  parent            Region?      @relation("RegionHierarchy", fields: [parentUlid], references: [ulid])
  children          Region[]     @relation("RegionHierarchy")
  
  createdAt         DateTime     @default(now()) @db.Timestamptz
  updatedAt         DateTime     @updatedAt @db.Timestamptz

  @@index([organizationUlid])
  @@index([parentUlid])
  @@map("Region")
}

model OrganizationMember {
  ulid              String        @id @db.Char(26)
  organizationUlid  String        @db.Char(26)
  userUlid         String        @db.Char(26)
  role             OrgRole       @default(MEMBER)
  scope            String?       @default("LOCAL")
  status           String        @default("ACTIVE")
  customPermissions Json?        @db.JsonB
  metadata         Json?         @db.JsonB
  
  organization     Organization  @relation(fields: [organizationUlid], references: [ulid], onDelete: Cascade)
  user            User          @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  
  createdAt       DateTime      @default(now()) @db.Timestamptz
  updatedAt       DateTime      @updatedAt @db.Timestamptz

  @@unique([organizationUlid, userUlid])
  @@index([organizationUlid])
  @@index([userUlid])
  @@index([role])
  @@index([status])
  @@map("OrganizationMember")
}

model RolePermission {
  ulid              String        @id @db.Char(26)
  organizationUlid  String        @db.Char(26)
  role             OrgRole
  permissions      Json          @db.JsonB
  metadata         Json?         @db.JsonB
  
  organization     Organization  @relation(fields: [organizationUlid], references: [ulid], onDelete: Cascade)
  
  createdAt       DateTime      @default(now()) @db.Timestamptz
  updatedAt       DateTime      @updatedAt @db.Timestamptz

  @@unique([organizationUlid, role])
  @@index([organizationUlid])
  @@index([role])
  @@map("RolePermission")
}

// Add before the RealtorProfile model
model MarketingProfile {
  ulid              String   @id @db.Char(26)
  userUlid          String?  @unique @db.Char(26)  // Make unique
  organizationUlid  String?  @unique @db.Char(26)  // Make unique
  
  // Branding
  slogan            String?
  brandColors       Json?    @db.JsonB
  logoUrl           String?
  brandGuidelines   Json?    @db.JsonB  // Added for organizations
  
  // Web Presence
  websiteUrl        String?
  blogUrl           String?
  
  // Social Media Links (structured)
  socialMediaLinks  Json     @db.JsonB
  
  // Marketing Areas & Focus
  marketingAreas    String[]
  targetAudience    String[]
  geographicFocus   Json?    @db.JsonB
  
  // Content
  testimonials      Json?    @db.JsonB
  pressFeatures     Json?    @db.JsonB
  marketingMaterials Json?   @db.JsonB
  
  // Organization-specific fields
  brandAssets       Json?    @db.JsonB  // Store logos, images, templates
  marketingTeam     Json?    @db.JsonB  // Team structure and contacts
  campaignHistory   Json?    @db.JsonB  // Track marketing campaigns
  
  // Analytics Integration
  googleAnalyticsId String?
  facebookPixelId   String?
  
  // Relations
  user              User?          @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  organization      Organization?  @relation(fields: [organizationUlid], references: [ulid], onDelete: Cascade)
  
  // Timestamps
  createdAt         DateTime @default(now()) @db.Timestamptz
  updatedAt         DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@index([organizationUlid])
  @@map("MarketingProfile")
}

// Domain Expertise Models
model DomainExpertise {
  ulid              String   @id @db.Char(26)
  userUlid          String   @db.Char(26)
  type              String   // e.g., "REALTOR", "LOAN_OFFICER", "TITLE_ESCROW", "INSURANCE"
  level             String   // e.g., "BEGINNER", "INTERMEDIATE", "EXPERT"
  status            String   @default("PENDING")
  yearsExperience   Int      @default(0)
  description       String?
  metadata          Json?    @db.JsonB
  isActive          Boolean  @default(true)
  
  // Relations
  user              User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  coachProfile      CoachProfile? @relation(fields: [coachProfileUlid], references: [ulid])
  menteeProfile     MenteeProfile? @relation(fields: [menteeProfileUlid], references: [ulid])
  verifications     DomainVerification[]
  
  // Profile relations
  coachProfileUlid   String?  @db.Char(26)
  menteeProfileUlid  String?  @db.Char(26)
  
  createdAt         DateTime @default(now()) @db.Timestamptz
  updatedAt         DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@index([type])
  @@index([level])
  @@index([status])
  @@index([coachProfileUlid])
  @@index([menteeProfileUlid])
  @@map("DomainExpertise")
}

model DomainVerification {
  ulid                  String   @id @db.Char(26)
  domainExpertiseUlid   String   @db.Char(26)
  userUlid             String   @db.Char(26)
  type                 String   // e.g., "LICENSE", "CERTIFICATION"
  status               String   @default("PENDING")
  documentUrl          String?
  verificationData     Json?           @db.JsonB
  expiresAt            DateTime?       @db.Timestamptz
  metadata             Json?           @db.JsonB
  
  // Relations
  domainExpertise      DomainExpertise @relation(fields: [domainExpertiseUlid], references: [ulid], onDelete: Cascade)
  user                 User            @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  
  createdAt            DateTime        @default(now()) @db.Timestamptz
  updatedAt            DateTime        @updatedAt @db.Timestamptz

  @@index([domainExpertiseUlid])
  @@index([userUlid])
  @@index([type])
  @@index([status])
  @@map("DomainVerification")
}

// Base profile for all realtors (both coaches and mentees)
model RealtorProfile {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @unique @db.Char(26)
  yearsExperience        Int?
  
  // Professional Information
  propertyTypes          String[]
  specializations        String[]
  certifications         String[]
  languages             String[]
  companyName           String?
  
  // Geographic Focus
  geographicFocus        Json?
  primaryMarket          String?
  
  // Relations
  user                 User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  listings             Listing[]

  // MLS Integration fields
  mlsId                String?  @unique
  mlsName              String?
  mlsStatus            String?  @default("ACTIVE")

  // RESO Member fields
  memberKey             String?  @unique
  memberStatus          String?
  designations          String[]
  
  createdAt            DateTime @default(now()) @db.Timestamptz
  updatedAt            DateTime @updatedAt @db.Timestamptz
  
  @@index([userUlid])
  @@map("RealtorProfile")
}

// Add after RealtorProfile model
model LoanOfficerProfile {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @unique @db.Char(26)
  yearsExperience        Int?
  
  // Professional Information
  nmls                   String?  @unique  // National Mortgage Licensing System ID
  lenderName             String?
  branchLocation         String?
  loanTypes              LoanType[]
  specializations        String[]
  certifications         String[]
  languages             String[]
  
  // Performance Metrics
  closedLoansCount       Int?
  totalLoanVolume        Decimal? @db.Decimal(12,2)
  averageLoanSize        Decimal? @db.Decimal(12,2)
  
  // Geographic Focus
  geographicFocus        Json?    @db.JsonB
  primaryMarket          String?
  licensedStates         String[]

  // Lending Parameters
  minLoanAmount         Decimal? @db.Decimal(12,2)
  maxLoanAmount         Decimal? @db.Decimal(12,2)
  typicalTurnaroundDays Int?
  
  // Relations
  user                 User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt            DateTime @default(now()) @db.Timestamptz
  updatedAt            DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@map("LoanOfficerProfile")
}

model InvestorProfile {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @unique @db.Char(26)
  yearsExperience        Int?
  
  // Professional Information
  companyName            String?
  investmentStrategies   InvestmentStrategy[]
  specializations        String[]
  certifications         String[]
  languages             String[]
  
  // Investment Criteria
  minInvestmentAmount    Decimal? @db.Decimal(12,2)
  maxInvestmentAmount    Decimal? @db.Decimal(12,2)
  targetRoi              Decimal? @db.Decimal(5,2)  // Percentage
  preferredPropertyTypes String[]
  
  // Portfolio Metrics
  propertiesOwned        Int?
  totalPortfolioValue    Decimal? @db.Decimal(12,2)
  completedDeals         Int?
  
  // Geographic Focus
  geographicFocus        Json?    @db.JsonB
  primaryMarket          String?
  targetMarkets          String[]
  
  // Relations
  user                 User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt            DateTime @default(now()) @db.Timestamptz
  updatedAt            DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@map("InvestorProfile")
}

model PropertyManagerProfile {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @unique @db.Char(26)
  yearsExperience        Int?
  
  // Professional Information
  companyName            String?
  licenseNumber          String?  @unique
  managerTypes           PropertyManagerType[]
  specializations        String[]
  certifications         String[]
  languages             String[]
  
  // Portfolio Metrics
  propertiesManaged      Int?
  totalUnits             Int?
  squareFeetManaged      Decimal? @db.Decimal(12,2)
  occupancyRate          Decimal? @db.Decimal(5,2)  // Percentage
  
  // Service Areas
  geographicFocus        Json?    @db.JsonB
  primaryMarket          String?
  serviceZips            String[]
  
  // Management Details
  minimumUnits           Int?
  propertyTypes          String[]
  services               String[]
  managementSoftware     String?
  
  // Relations
  user                 User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt            DateTime @default(now()) @db.Timestamptz
  updatedAt            DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@map("PropertyManagerProfile")
}

// Add TitleEscrowProfile model
model TitleEscrowProfile {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @unique @db.Char(26)
  yearsExperience        Int?
  
  // Professional Information
  companyName            String?
  licenseNumber          String?  @unique
  titleEscrowTypes       TitleEscrowType[]
  specializations        String[]
  certifications         String[]
  languages             String[]
  
  // Performance Metrics
  closingsCompleted      Int?
  averageClosingTime     Int?     // in days
  totalTransactionVolume Decimal? @db.Decimal(12,2)
  
  // Geographic Focus
  geographicFocus        Json?    @db.JsonB
  primaryMarket          String?
  licensedStates         String[]
  
  // Relations
  user                   User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@map("TitleEscrowProfile")
}

// Add InsuranceProfile model
model InsuranceProfile {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @unique @db.Char(26)
  yearsExperience        Int?
  
  // Professional Information
  companyName            String?
  licenseNumber          String?  @unique
  insuranceTypes         InsuranceType[]
  specializations        String[]
  certifications         String[]
  languages             String[]
  
  // Performance Metrics
  policiesIssued         Int?
  totalPremiumVolume     Decimal? @db.Decimal(12,2)
  claimProcessingTime    Int?     // in days
  
  // Geographic Focus
  geographicFocus        Json?    @db.JsonB
  primaryMarket          String?
  licensedStates         String[]
  
  // Relations
  user                   User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@map("InsuranceProfile")
}

model Session {
  ulid                   String   @id @db.Char(26)
  menteeUlid             String   @db.Char(26)
  coachUlid              String   @db.Char(26)
  startTime              DateTime @db.Timestamptz
  endTime                DateTime @db.Timestamptz
  status                 SessionStatus @default(SCHEDULED)
  sessionType            SessionType?
  sessionNotes           String?
  zoomMeetingId          String?
  zoomMeetingUrl         String?

  // Payment fields
  priceAmount            Float?
  currency               String? @default("usd")
  platformFeeAmount      Float?
  coachPayoutAmount      Float?
  stripePaymentIntentId  String?
  paymentStatus          String? @default("pending")
  payoutStatus           String?

  // Relationships
  mentee                 User           @relation("UserSessions", fields: [menteeUlid], references: [ulid])
  coach                  User           @relation("CoachSessions", fields: [coachUlid], references: [ulid])
  transaction            Transaction?
  payment                Payment?       @relation("SessionPayment")
  reviews                Review[]
  notes                  Note[]
  reminders              Reminder[]
  calendlyEvent          CalendlyEvent? @relation("SessionCalendlyEvent")
  zoomSession            ZoomSession?
  disputes               Dispute[]      @relation("SessionDisputes")

  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  @@index([menteeUlid])
  @@index([coachUlid])
  @@map("Session")
}

model Payment {
  ulid                   String   @id @db.Char(26)
  sessionUlid            String?  @unique @db.Char(26)
  payerUlid              String   @db.Char(26)
  payeeUlid              String   @db.Char(26)
  amount                 Decimal  @db.Decimal(10, 2)
  currency               Currency @default(USD)
  status                 PaymentStatus @default(PENDING)
  stripePaymentId        String?

  session                Session? @relation("SessionPayment", fields: [sessionUlid], references: [ulid])
  payer                  User     @relation("Payer", fields: [payerUlid], references: [ulid])
  payee                  User     @relation("Payee", fields: [payeeUlid], references: [ulid])
  disputes               Dispute[] @relation("PaymentDisputes")
  chargebacks            Chargeback[]
  refunds                Refund[]

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([sessionUlid])
  @@index([payerUlid])
  @@index([payeeUlid])
}

model Review {
  ulid                   String   @id @db.Char(26)
  reviewerUlid           String   @db.Char(26)
  revieweeUlid           String   @db.Char(26)
  sessionUlid            String?  @db.Char(26)
  rating                 Int
  comment                String?
  status                 String   @default("published")
  isVerified             Boolean  @default(false)

  reviewer               User     @relation("Reviewer", fields: [reviewerUlid], references: [ulid], onDelete: Cascade)
  reviewee               User     @relation("Reviewee", fields: [revieweeUlid], references: [ulid], onDelete: Cascade)
  session                Session? @relation(fields: [sessionUlid], references: [ulid], onDelete: SetNull)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([reviewerUlid])
  @@index([revieweeUlid])
  @@index([sessionUlid])
}

model CoachApplication {
  ulid                   String   @id @db.Char(26)
  applicantUlid          String   @db.Char(26)
  status                 CoachApplicationStatus @default(PENDING)
  experience             String
  specialties            String[] @default([])
  industrySpecialties    String[] @default([])
  applicationDate        DateTime @default(now())
  reviewerUlid           String?  @db.Char(26)
  reviewDate             DateTime?
  notes                  String?
  
  // Draft-specific fields
  isDraft                Boolean   @default(false)
  lastSavedAt            DateTime? @db.Timestamptz
  draftData              Json?
  draftVersion           Int       @default(1)
  
  // Application fields
  resumeUrl              String?
  linkedIn               String?
  primarySocialMedia     String?
  additionalInfo         String?

  applicant              User     @relation("Applicant", fields: [applicantUlid], references: [ulid], onDelete: Cascade)
  reviewer               User?    @relation("Reviewer", fields: [reviewerUlid], references: [ulid], onDelete: SetNull)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([applicantUlid])
  @@index([reviewerUlid])
  @@index([isDraft, applicantUlid])
}

model Note {
  ulid                   String   @id @db.Char(26)
  authorUlid             String   @db.Char(26)
  relatedUserUlid        String?  @db.Char(26)
  sessionUlid            String?  @db.Char(26)
  content                String
  visibility             String   @default("private")

  author                 User     @relation("AuthorNotes", fields: [authorUlid], references: [ulid], onDelete: Cascade)
  relatedUser            User?    @relation("RelatedUserNotes", fields: [relatedUserUlid], references: [ulid], onDelete: SetNull)
  session                Session? @relation(fields: [sessionUlid], references: [ulid], onDelete: SetNull)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([authorUlid])
  @@index([relatedUserUlid])
  @@index([sessionUlid])
}

model SupportTicket {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @db.Char(26)
  title                  String
  description            String
  status                 TicketStatus @default(OPEN)

  user                   User     @relation("UserSupportTickets", fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userUlid])
}

model Payout {
  ulid                   String   @id @db.Char(26)
  payeeUlid              String   @db.Char(26)
  amount                 Decimal  @db.Decimal(10, 2)
  currency               String   @default("USD")
  stripeTransferId       String?
  status                 PayoutStatus @default(PENDING)
  scheduledDate          DateTime
  processedAt            DateTime?

  payee                  User     @relation("PayoutPayee", fields: [payeeUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([payeeUlid])
}

model Dispute {
  ulid                   String   @id @db.Char(26)
  stripeDisputeId        String   @unique
  sessionUlid            String?  @db.Char(26)
  session                Session? @relation("SessionDisputes", fields: [sessionUlid], references: [ulid], onDelete: SetNull)
  amount                 Int
  currency               String
  status                 String
  reason                 String
  evidenceDueBy          DateTime
  evidence               Json
  stripePaymentIntentId  String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Payment relation
  paymentUlid            String?  @db.Char(26)
  payment                Payment? @relation("PaymentDisputes", fields: [paymentUlid], references: [ulid], onDelete: SetNull)

  @@index([sessionUlid])
  @@index([stripeDisputeId])
  @@map("Dispute")
}

model Chargeback {
  ulid                   String   @id @db.Char(26)
  paymentUlid            String   @db.Char(26)
  reason                 String?
  status                 String   @default("open")

  payment                Payment  @relation(fields: [paymentUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([paymentUlid])
}

model Refund {
  ulid                   String   @id @db.Char(26)
  paymentUlid            String   @db.Char(26)
  reason                 String?
  status                 RefundStatus @default(PENDING)

  payment                Payment  @relation(fields: [paymentUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([paymentUlid])
}

model Message {
  ulid                   String   @id @db.Char(26)
  senderUlid             String   @db.Char(26)
  recipientUlid          String   @db.Char(26)
  content                String
  readStatus             String   @default("unread")
  sentAt                 DateTime @default(now())

  sender                 User     @relation("Sender", fields: [senderUlid], references: [ulid], onDelete: Cascade)
  recipient              User     @relation("Recipient", fields: [recipientUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([senderUlid])
  @@index([recipientUlid])
}

model Referral {
  ulid                   String   @id @db.Char(26)
  referrerUlid           String   @db.Char(26)
  refereeUlid            String   @db.Char(26)
  referralCode           String   @unique
  status                 String   @default("pending")

  referrer               User     @relation("Referrer", fields: [referrerUlid], references: [ulid], onDelete: Cascade)
  referee                User     @relation("Referee", fields: [refereeUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([referrerUlid])
  @@index([refereeUlid])
}

model Reminder {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @db.Char(26)
  sessionUlid            String?  @db.Char(26)
  message                String
  remindAt               DateTime
  status                 String   @default("pending")

  user                   User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  session                Session? @relation(fields: [sessionUlid], references: [ulid], onDelete: SetNull)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userUlid])
  @@index([sessionUlid])
}

model CalendlyIntegration {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @unique @db.Char(26)
  user                   User     @relation(fields: [userUlid], references: [ulid])
  userId                 String    // Calendly user ID
  eventTypeId            String?   // Default event type ID
  accessToken            String
  refreshToken           String
  scope                  String
  organization           String?   // Organization ID
  expiresAt              DateTime  @db.Timestamptz
  lastSyncAt             DateTime? @db.Timestamptz
  failedRefreshCount     Int       @default(0)
  status                 String    @default("active")
  schedulingUrl          String    // Personal scheduling URL
  organizationUrl        String?   // Optional - only for org accounts
  createdAt              DateTime  @default(now()) @db.Timestamptz
  updatedAt              DateTime  @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@map("CalendlyIntegration")
}

model Subscription {
  ulid                   String   @id @db.Char(26)
  subscriptionId         String   @unique
  userUlid               String?  @db.Char(26)
  organizationUlid       String?  @db.Char(26)
  stripeCustomerId       String
  status                 String
  startDate              DateTime
  endDate                DateTime?
  planUlid               String   @db.Char(26)
  defaultPaymentMethodId String?
  quantity               Int      @default(1)
  billingCycle          String   @default("monthly")
  metadata               Json     @default("{}")

  // Relations
  user                   User?          @relation(fields: [userUlid], references: [ulid], onDelete: SetNull)
  organization           Organization?  @relation(fields: [organizationUlid], references: [ulid], onDelete: SetNull)
  plan                   SubscriptionPlan @relation(fields: [planUlid], references: [ulid], onDelete: Restrict)
  invoices               Invoice[]

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userUlid])
  @@index([organizationUlid])
  @@index([planUlid])
}

model SubscriptionPlan {
  ulid                   String   @id @db.Char(26)
  planId                 String   @unique
  name                   String
  description            String
  type                   PlanType @default(INDIVIDUAL)
  amount                 Decimal  @db.Decimal(10, 2)
  currency               String   @default("USD")
  interval               String
  features               Json     @default("{}")
  limits                 Json     @default("{}")
  isActive               Boolean  @default(true)
  metadata               Json     @default("{}")

  subscriptions          Subscription[]

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([type])
  @@index([isActive])
}

model Invoice {
  ulid                   String   @id @db.Char(26)
  invoiceId              String   @unique
  subscriptionId         String
  userUlid               String?  @db.Char(26)
  amountPaid             Decimal  @db.Decimal(10, 2)
  amountDue              Decimal? @db.Decimal(10, 2)
  currency               String
  status                 String
  dueDate                DateTime?

  subscription           Subscription? @relation(fields: [subscriptionId], references: [subscriptionId], onDelete: SetNull)
  user                   User?        @relation(fields: [userUlid], references: [ulid], onDelete: SetNull)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([subscriptionId])
  @@index([userUlid])
}

model CalendlyWebhookEvent {
  ulid                   String   @id @db.Char(26)
  eventType              String
  payload                Json
  processed              Boolean  @default(false)
  error                  String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([eventType])
  @@index([processed])
}

model CalendlyEvent {
  ulid                   String   @id @db.Char(26)
  eventUuid              String   @unique
  userUlid               String   @db.Char(26)
  status                 String
  eventType              String
  inviteeEmail           String
  inviteeName            String
  sessionUlid            String?  @unique @db.Char(26)

  // Relationships
  session                Session? @relation("SessionCalendlyEvent", fields: [sessionUlid], references: [ulid])
  user                   User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userUlid])
  @@index([eventUuid])
}

model ZoomSession {
  ulid                   String   @id @db.Char(26)
  sessionUlid            String   @unique @db.Char(26)
  topic                  String
  status                 String
  joinUrl                String?

  // Relationships
  session                Session  @relation(fields: [sessionUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([sessionUlid])
}

model Goal {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @db.Char(26)
  title                  String
  description            String?
  target                 Float
  current                Float      @default(0)
  deadline               DateTime
  type                   GoalType
  status                 GoalStatus @default(IN_PROGRESS)

  // Relationships
  user                   User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@index([userUlid])
  @@index([type])
  @@index([status])
}

// Application-specific achievements
model Achievement {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @db.Char(26)
  type                   String   // e.g., "SESSION_MILESTONE", "RATING_MILESTONE"
  milestone              String   // e.g., "10_SESSIONS", "100_FIVE_STAR_REVIEWS"
  earnedAt               DateTime @default(now()) @db.Timestamptz
  metadata               Json?    // Additional achievement-specific data

  user                   User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@index([type])
  @@map("Achievement")
}

// Updated Professional Recognition model
model ProfessionalRecognition {
  ulid                   String   @id @db.Char(26)
  userUlid              String   @db.Char(26)
  type                  RecognitionType
  title                 String
  issuer                String
  issueDate             DateTime @db.Timestamptz
  expiryDate            DateTime? @db.Timestamptz
  description           String?
  verificationUrl       String?
  certificateUrl        String?
  status                CertificationStatus @default(ACTIVE)
  industryType          String? // Field to indicate which industry the recognition belongs to (e.g., "REALTOR", "INVESTOR")
  isVisible             Boolean @default(true) // Whether this recognition should be displayed on the profile

  // Relations - simplified to just user and coach profile
  user                  User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)
  coachProfile          CoachProfile? @relation(fields: [coachProfileUlid], references: [ulid])
  coachProfileUlid      String? @db.Char(26)

  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  @@index([userUlid])
  @@index([coachProfileUlid])
  @@map("ProfessionalRecognition")
}

model CoachingAvailabilitySchedule {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @db.Char(26)
  name                   String // e.g., "Standard Schedule", "Holiday Hours"
  timezone               String
  isDefault              Boolean  @default(false)
  active                 Boolean  @default(true)

  // Session Configuration
  defaultDuration        Int     @default(60)
  minimumDuration          Int     @default(30)
  maximumDuration          Int     @default(120)
  allowCustomDuration      Boolean @default(false)
  bufferBefore             Int     @default(15) // minutes
  bufferAfter              Int     @default(15) // minutes

  // Availability Rules
  rules                  Json // Stored as JSONB - weekly schedule, breaks, etc.

  // Integration Settings
  calendlyEnabled          Boolean @default(false)
  zoomEnabled              Boolean @default(false)

  // Metrics
  totalSessions            Int      @default(0)
  averageRating            Decimal? @db.Decimal(3, 2)

  user                     User     @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@index([userUlid])
}

model StripePaymentMethod {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @db.Char(26)
  stripePaymentMethodId  String
  type                   String // card, bank_account
  isDefault              Boolean  @default(false)
  metadata               Json     @default("{}")
  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  // Relationships
  user                   User     @relation(fields: [userUlid], references: [ulid])

  @@unique([userUlid, stripePaymentMethodId])
  @@index([userUlid])
  @@map("StripePaymentMethod")
}

model SetupIntent {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @db.Char(26)
  stripeSetupIntentId    String
  status                 String
  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  // Relationships
  user                   User     @relation(fields: [userUlid], references: [ulid])

  @@index([userUlid])
  @@map("SetupIntent")
}

model StripeConnectedAccount {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @unique @db.Char(26)
  stripeAccountId        String   @unique
  country                String
  defaultCurrency        String    @default("usd")
  payoutsEnabled         Boolean   @default(false)
  detailsSubmitted       Boolean   @default(false)
  chargesEnabled         Boolean   @default(false)
  requiresOnboarding     Boolean   @default(true)
  deauthorizedAt         DateTime? @db.Timestamptz
  createdAt              DateTime  @default(now()) @db.Timestamptz
  updatedAt              DateTime  @updatedAt @db.Timestamptz

  // Relationships
  user                   User     @relation(fields: [userUlid], references: [ulid])

  @@map("StripeConnectedAccount")
}

model Transaction {
  ulid                   String   @id @db.Char(26)
  type                   String // session_payment, bundle_payment, payout, refund
  status                 String // pending, completed, failed, refunded
  amount                 Float
  currency               String
  stripePaymentIntentId  String?
  stripeTransferId       String?
  platformFee            Float?
  coachPayout            Float?
  sessionUlid            String?  @unique @db.Char(26)
  payerUlid              String   @db.Char(26)
  coachUlid              String   @db.Char(26)
  metadata               Json     @default("{}")
  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  // Relationships
  session                Session? @relation(fields: [sessionUlid], references: [ulid])
  payer                  User       @relation("TransactionPayer", fields: [payerUlid], references: [ulid])
  coach                  User       @relation("TransactionCoach", fields: [coachUlid], references: [ulid])

  @@index([payerUlid])
  @@index([coachUlid])
  @@index([sessionUlid])
  @@map("Transaction")
}

model SystemHealth {
  ulid                   String   @id @db.Char(26)
  status                 Int
  activeSessions         Int
  pendingReviews         Int
  securityAlerts         Int
  uptime                 Float
  createdAt              DateTime @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime @updatedAt @db.Timestamptz(6)

  @@index([createdAt])
  @@map("SystemHealth")
}

model AdminMetrics {
  ulid                   String   @id @db.Char(26)
  totalUsers             Int
  activeUsers            Int
  totalCoaches           Int
  activeCoaches          Int
  pendingCoaches         Int
  totalSessions          Int
  completedSessions      Int
  totalRevenue           Float
  monthlyRevenue         Float
  createdAt              DateTime @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime @updatedAt @db.Timestamptz(6)

  @@index([createdAt])
  @@map("AdminMetrics")
}

model SystemActivity {
  ulid                   String   @id @db.Char(26)
  type                   String    // Enum in application layer
  title                  String
  description            String
  severity               String?   // Optional enum in application layer
  createdAt              DateTime @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime @updatedAt @db.Timestamptz(6)

  @@index([type, createdAt])
  @@index([severity, createdAt])
  @@map("SystemActivity")
}

model SystemAlerts {
  ulid                   String   @id @db.Char(26)
  type                   String    // Enum in application layer
  title                  String
  message                String
  severity               String    // Enum in application layer
  createdAt              DateTime @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime @updatedAt @db.Timestamptz(6)

  @@index([type, createdAt])
  @@index([severity, createdAt])
  @@map("SystemAlerts")
}

// Admin Dashboard MVP Models
model AdminActivity {
  ulid                   String   @id @db.Char(26)
  type                   String    // USER_ACTION, COACH_APPLICATION, SESSION, SYSTEM
  title                  String
  description            String
  userUlid               String?  @db.Char(26)
  severity               String    // LOW, MEDIUM, HIGH
  createdAt              DateTime @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime @updatedAt @db.Timestamptz(6)

  @@index([type])
  @@index([createdAt])
  @@map("AdminActivity")
}

// Keep track of important admin actions for audit
model AdminAuditLog {
  ulid                   String   @id @db.Char(26)
  adminUlid              String   @db.Char(26)
  admin                  User     @relation("AdminAuditLogs", fields: [adminUlid], references: [ulid])
  action                 String    // Type of action performed
  targetType             String    // What was affected (user, coach, application, etc)
  targetUlid             String   @db.Char(26)
  details                Json      // Additional details about the action
  createdAt              DateTime @default(now()) @db.Timestamptz(6)

  @@index([adminUlid])
  @@index([action])
  @@index([createdAt])
  @@map("AdminAuditLog")
}

// New Listing model with RESO compliance
model Listing {
  ulid                   String   @id @db.Char(26)
  // Core Identification (RESO format)
  listingKey             String?       @unique  // RESO: Unique identifier for MLS integration
  parcelNumber           String?       @db.VarChar(50)  // RESO: Official parcel/tax ID
  taxLot                 String?       @db.VarChar(50)  // RESO: Tax lot number
  taxBlock               String?       @db.VarChar(50)  // RESO: Tax block number
  taxMapNumber           String?       @db.VarChar(50)  // RESO: Tax map reference
  taxLegalDescription    String?     @db.VarChar(1000) // RESO: Full legal description
  
  // Property Classification (RESO format)
  propertyType           PropertyType  // Primary classification
  propertySubType        PropertySubType? // More specific classification
  status                 ListingStatus @default(Active) // RESO: Current listing status
  
  // Location Information (RESO format)
  streetNumber         String        @db.VarChar(25)  // RESO: Street number component
  streetName           String        @db.VarChar(50)  // RESO: Street name component
  unitNumber           String?       @db.VarChar(25)  // RESO: Unit/apartment number
  city                 String        @db.VarChar(150) // RESO: City name
  stateOrProvince      String        @db.VarChar(50)  // RESO: State/province
  postalCode           String        @db.VarChar(10)  // RESO: Postal/ZIP code
  
  // Price Information (RESO format)
  listPrice            Decimal       @db.Decimal(12,2) // RESO: Current listing price
  originalListPrice    Decimal?      @db.Decimal(12,2) // RESO: Original price when listed
  closePrice             Decimal?      @db.Decimal(12,2) // RESO: Final sale price
  
  // Dates and Timestamps (RESO format)
  listingContractDate  DateTime?   @db.Timestamptz  // RESO: Contract start date
  closeDate            DateTime?   @db.Timestamptz  // RESO: Property closing date
  statusChangeTimestamp DateTime? @db.Timestamptz  // RESO: Last status change
  priceChangeTimestamp   DateTime? @db.Timestamptz  // RESO: Last price change
  modificationTimestamp DateTime? @db.Timestamptz  // RESO: Last modification
  createdAt            DateTime   @default(now()) @db.Timestamptz
  updatedAt            DateTime   @updatedAt @db.Timestamptz
  
  // Physical Characteristics (RESO format)
  bedroomsTotal        Int?         // RESO: Total number of bedrooms
  bathroomsTotal       Decimal?     @db.Decimal(3,1) // RESO: Total bathrooms (allows half baths)
  livingArea           Decimal?     @db.Decimal(12,2) // RESO: Living space square footage
  lotSize              Decimal?     @db.Decimal(12,2) // RESO: Lot size in square feet
  lotSizeDimensions    String?      @db.VarChar(50)  // RESO: Actual lot dimensions
  lotDimensionsSource  String?    @db.VarChar(50)  // RESO: Source of dimension data
  yearBuilt            Int?         // RESO: Year property was built
  stories              Int?         // RESO: Number of stories/levels
  
  // Structural Details (RESO format)
  architecturalStyle   ArchitecturalStyle? // RESO: Architectural style
  basement             BasementType?     // RESO: Basement type
  roofType             RoofType?         // RESO: Type of roof
  view                 ViewType[]        // RESO: Available views
  
  // Parking Information (RESO format)
  parkingTotal         Decimal?     @db.Decimal(12,2) // RESO: Total parking spaces
  garageSpaces         Decimal?     @db.Decimal(12,2) // RESO: Garage spaces
  
  // Property Features (RESO format)
  furnished            FurnishedStatus? // RESO: Furnishing status
  appliances           String[]        // RESO: Available appliances
  interiorFeatures     String[]        // RESO: Interior features
  exteriorFeatures     String[]        // RESO: Exterior features
  heating              String[]        // RESO: Heating systems
  cooling              String[]        // RESO: Cooling systems
  
  // Property Amenities (RESO format)
  isWaterfront         Boolean        @default(false) // RESO: Waterfront property
  hasFireplace         Boolean        @default(false) // RESO: Fireplace present
  hasPatio             Boolean        @default(false) // RESO: Patio present
  hasDeck              Boolean        @default(false) // RESO: Deck present
  hasPorch             Boolean        @default(false) // RESO: Porch present
  
  // Property Condition and Terms (RESO format)
  propertyCondition    PropertyCondition[] // RESO: Current condition
  listingTerms         ListingTerms[]     // RESO: Acceptable terms
  listingAgreement     ListingAgreement?  // RESO: Type of listing agreement
  
  // Community Information (RESO format)
  schoolDistrict       String?       @db.VarChar(100) // RESO: School district name
  elementarySchool     String?       @db.VarChar(100) // RESO: Elementary school
  middleSchool         String?       @db.VarChar(100) // RESO: Middle school
  highSchool             String?       @db.VarChar(100) // RESO: High school
  
  // Financial Information (RESO format)
  taxYear              Int?         // RESO: Tax assessment year
  taxAnnualAmount      Decimal?     @db.Decimal(12,2) // RESO: Annual tax amount
  hoaName              String?      @db.VarChar(100)  // RESO: HOA name
  hoaFeeAmount         Decimal?     @db.Decimal(12,2) // RESO: HOA fee amount
  hoaFeeFrequency      String?      @db.VarChar(50)   // RESO: HOA payment frequency
  
  // Utilities (RESO format)
  electricityAvailable Boolean    @default(true) // RESO: Electricity status
  gasAvailable           Boolean    @default(true) // RESO: Gas status
  sewerAvailable         Boolean    @default(true) // RESO: Sewer status
  waterAvailable         Boolean    @default(true) // RESO: Water status
  
  // Zoning Information (RESO format)
  zoning               String?     @db.VarChar(25)  // RESO: Zoning code
  zoningDescription  String?     @db.VarChar(255) // RESO: Zoning description
  
  // Marketing Information (RESO format)
  publicRemarks       String?     @db.VarChar(4000) // RESO: Public description
  privateRemarks      String?     @db.VarChar(4000) // RESO: Agent-only remarks
  photos               Json?       // RESO: Property photos
  virtualTours         Json?       // RESO: Virtual tour links
  isFeatured           Boolean     @default(false)   // Custom: Featured listing flag
  featuredOrder        Int?        // Custom: Featured listing order

  // Custom fields
  mlsLink              String?     @db.VarChar(1000) // Custom: Direct link to MLS listing
  publicListingUrl     String?     @db.VarChar(1000) // Custom: Link to public listing (Zillow, Redfin, etc.)
  
  // Source Information (RESO format)
  source               String     @default("MANUAL") // RESO: Data source
  mlsSource            String?    // RESO: MLS system name
  mlsId                String?    // RESO: MLS-specific ID
  
  // Relations
  realtorProfileUlid      String   @db.Char(26)
  realtorProfile        RealtorProfile @relation(fields: [realtorProfileUlid], references: [ulid], onDelete: Cascade)
  
  // Indexes for performance
  @@index([realtorProfileUlid])
  @@index([listingKey])
  @@index([status])
  @@index([isFeatured])
  @@map("Listing")
}

// AI Chat Models
model AIThread {
  ulid                   String   @id @db.Char(26)
  userUlid               String   @db.Char(26)
  title                  String
  category               String
  status                 String     @default("ACTIVE")
  messages               AIMessage[]
  createdAt              DateTime   @default(now()) @db.Timestamptz
  updatedAt              DateTime   @updatedAt @db.Timestamptz

  // Relations
  user                   User       @relation(fields: [userUlid], references: [ulid], onDelete: Cascade)

  @@index([userUlid])
  @@map("AIThread")
}

model AIMessage {
  ulid                   String   @id @db.Char(26)
  threadUlid             String   @db.Char(26)
  role                   String   // user or assistant
  content                String   @db.Text
  model                  String   // e.g., gpt-4
  tokens                 Int      @default(0)
  createdAt              DateTime @default(now()) @db.Timestamptz
  updatedAt              DateTime @updatedAt @db.Timestamptz

  // Relations
  thread                 AIThread @relation(fields: [threadUlid], references: [ulid], onDelete: Cascade)

  @@index([threadUlid])
  @@map("AIMessage")
}






