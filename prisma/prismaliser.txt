https://prismaliser.app?code=generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserRole {
  realtor
  loan_officer
  realtor_coach
  loan_officer_coach
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum TicketStatus {
  open
  in_progress
  closed
}

enum UserStatus {
  active
  inactive
  suspended
}

enum SessionStatus {
  scheduled
  completed
  cancelled
  no_show
}

enum Currency {
  USD
  EUR
  GBP
}

enum PaymentMethod {
  credit_card
  debit_card
  bank_transfer
}

enum PayoutStatus {
  pending
  processed
  failed
}

enum RefundStatus {
  pending
  completed
  failed
}

enum DisputeStatus {
  open
  resolved
  rejected
}

// Models
model User {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  firstName       String?
  lastName        String?
  gender          String?
  profileImageUrl String?
  userId          String     @unique
  subscription    String?
  role            UserRole   @default(realtor)
  status          UserStatus @default(active)
  deletedAt       DateTime?

  // Relationships
  baseProfile             BaseProfile?
  realtorProfile          RealtorProfile?
  loanOfficerProfile      LoanOfficerProfile?
  realtorCoachProfile     RealtorCoachProfile?
  loanOfficerCoachProfile LoanOfficerCoachProfile?

  brokerId Int?
  teamId   Int?

  broker Broker? @relation(fields: [brokerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  sessionsAsCoach  Session[] @relation("CoachSessions")
  sessionsAsMentee Session[] @relation("MenteeSessions")

  paymentsMade      Payment[]       @relation("PayerPayments")
  paymentsReceived  Payment[]       @relation("PayeePayments")
  payouts           Payout[]
  reviewsGiven      Review[]        @relation("ReviewerReviews")
  reviewsReceived   Review[]        @relation("RevieweeReviews")
  messagesSent      Message[]       @relation("SenderMessages")
  messagesReceived  Message[]       @relation("RecipientMessages")
  referralsMade     Referral[]      @relation("ReferrerReferrals")
  referralsReceived Referral[]      @relation("RefereeReferrals")
  applications      Application[]
  notesCreated      Note[]          @relation("AuthorNotes")
  notesRelated      Note[]          @relation("RelatedUserNotes")
  reminders         Reminder[]
  supportTickets    SupportTicket[] @relation("UserSupportTickets")
  subscriptions     Subscription[]
  invoices          Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([brokerId])
  @@index([teamId])
}

model BaseProfile {
  userId       Int     @id
  bio          String?
  careerStage  String?
  goals        String?
  availability String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RealtorProfile {
  userId        Int     @id
  companyName   String?
  licenseNumber String? @unique
  phoneNumber   String?

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  realtorCoachProfile RealtorCoachProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoanOfficerProfile {
  userId        Int     @id
  companyName   String?
  licenseNumber String? @unique
  phoneNumber   String?

  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  loanOfficerCoachProfile LoanOfficerCoachProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RealtorCoachProfile {
  userId            Int      @id
  specialties       String?
  yearsOfExperience Int?
  hourlyRate        Decimal? @db.Decimal(10, 2)
  bio               String?
  oneTimeCallPrice  Decimal? @db.Decimal(10, 2)
  bundlePrice       Decimal? @db.Decimal(10, 2)

  realtorProfile RealtorProfile @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "RealtorCoachProfile_realtorProfile_fkey")
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade, map: "RealtorCoachProfile_user_fkey")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoanOfficerCoachProfile {
  userId            Int      @id
  specialties       String?
  yearsOfExperience Int?
  hourlyRate        Decimal? @db.Decimal(10, 2)
  bio               String?
  oneTimeCallPrice  Decimal? @db.Decimal(10, 2)
  bundlePrice       Decimal? @db.Decimal(10, 2)

  loanOfficerProfile LoanOfficerProfile @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "LoanOfficerCoachProfile_loanOfficerProfile_fkey")
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade, map: "LoanOfficerCoachProfile_user_fkey")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Broker {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  teams Team[]
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id       Int    @id @default(autoincrement())
  name     String
  brokerId Int

  broker Broker @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  users  User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([brokerId])
}

model Session {
  id              Int           @id @default(autoincrement())
  coachId         Int?
  menteeId        Int?
  calendlyEventId String?
  durationMinutes Int
  status          SessionStatus @default(scheduled)
  deletedAt       DateTime?

  coach  User? @relation("CoachSessions", fields: [coachId], references: [id], onDelete: SetNull)
  mentee User? @relation("MenteeSessions", fields: [menteeId], references: [id], onDelete: SetNull)

  notes     Note[]
  reminders Reminder[]
  reviews   Review[]
  payments  Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([coachId])
  @@index([menteeId])
  @@index([coachId, status])
  @@index([menteeId, status])
}

model Payment {
  id                   Int           @id @default(autoincrement())
  sessionId            Int?
  payerId              Int
  payeeId              Int
  stripeChargeId       String        @unique
  amount               Decimal       @default(0.00) @db.Decimal(10, 2)
  currency             Currency      @default(USD)
  processingFee        Decimal       @default(0.00) @db.Decimal(10, 2)
  platformFee          Decimal       @default(0.00) @db.Decimal(10, 2)
  paymentMethod        PaymentMethod
  status               PaymentStatus @default(pending)
  transactionReference String?
  deletedAt            DateTime?

  session     Session?     @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  payer       User         @relation("PayerPayments", fields: [payerId], references: [id], onDelete: Cascade)
  payee       User         @relation("PayeePayments", fields: [payeeId], references: [id], onDelete: Cascade)
  disputes    Dispute[]
  chargebacks Chargeback[]
  refunds     Refund[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@index([payerId])
  @@index([payeeId])
  @@index([payerId, status])
  @@index([payeeId, status])
}

model Payout {
  id               Int          @id @default(autoincrement())
  payeeId          Int
  amount           Decimal      @default(0.00)
  currency         Currency     @default(USD)
  stripeTransferId String?
  status           PayoutStatus @default(pending)
  scheduledDate    DateTime
  processedAt      DateTime?

  payee User @relation(fields: [payeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([payeeId])
}

model Review {
  id         Int     @id @default(autoincrement())
  reviewerId Int
  revieweeId Int
  sessionId  Int?
  rating     Int
  comment    String?

  reviewer User     @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee User     @relation("RevieweeReviews", fields: [revieweeId], references: [id], onDelete: Cascade)
  session  Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  // @@check(rating >= 1 && rating <= 5)

  @@index([reviewerId])
  @@index([revieweeId])
  @@index([sessionId])
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  content     String
  readStatus  String   @default("unread")
  sentAt      DateTime @default(now())

  sender    User @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User @relation("RecipientMessages", fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([recipientId])
}

model Referral {
  id           Int    @id @default(autoincrement())
  referrerId   Int
  refereeId    Int
  referralCode String @unique
  status       String @default("pending")

  referrer User @relation("ReferrerReferrals", fields: [referrerId], references: [id], onDelete: Cascade)
  referee  User @relation("RefereeReferrals", fields: [refereeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([referrerId])
  @@index([refereeId])
}

model Application {
  id              Int     @id @default(autoincrement())
  userId          Int
  programName     String
  status          String  @default("submitted")
  applicationData String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Note {
  id            Int    @id @default(autoincrement())
  userId        Int
  relatedUserId Int?
  sessionId     Int?
  content       String
  visibility    String @default("private")

  author      User     @relation("AuthorNotes", fields: [userId], references: [id], onDelete: Cascade)
  relatedUser User?    @relation("RelatedUserNotes", fields: [relatedUserId], references: [id], onDelete: SetNull)
  session     Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([relatedUserId])
  @@index([sessionId])
}

model Reminder {
  id        Int      @id @default(autoincrement())
  userId    Int
  sessionId Int?
  message   String
  remindAt  DateTime
  status    String   @default("pending")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([sessionId])
}

model SupportTicket {
  id          Int          @id @default(autoincrement())
  userId      Int
  title       String
  description String
  status      TicketStatus @default(open)

  user User @relation("UserSupportTickets", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Dispute {
  id        Int           @id @default(autoincrement())
  paymentId Int
  reason    String?
  status    DisputeStatus @default(open)

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
}

model Chargeback {
  id        Int     @id @default(autoincrement())
  paymentId Int
  reason    String?
  status    String  @default("open")

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
}

model Refund {
  id        Int          @id @default(autoincrement())
  paymentId Int
  reason    String?
  status    RefundStatus @default(pending)

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
}

model Subscription {
  id                     Int       @id @default(autoincrement())
  subscriptionId         String    @unique
  stripeUserId           String
  status                 String
  startDate              DateTime
  endDate                DateTime?
  planId                 String
  defaultPaymentMethodId String?
  email                  String
  userId                 Int

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  plan     SubscriptionPlan @relation(fields: [planId], references: [planId], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([planId])
  @@index([userId])
}

model SubscriptionPlan {
  id          Int       @id @default(autoincrement())
  planId      String    @unique
  name        String
  description String
  amount      Decimal   @default(0.00) @db.Decimal(10, 2)
  currency    Currency  @default(USD)
  interval    String
  deletedAt   DateTime?

  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id             Int       @id @default(autoincrement())
  invoiceId      String    @unique
  subscriptionId String
  amountPaid     Decimal   @default(0.00) @db.Decimal(10, 2)
  amountDue      Decimal?  @default(0.00) @db.Decimal(10, 2)
  currency       Currency  @default(USD)
  status         String
  email          String
  userId         Int?
  deletedAt      DateTime?

  subscription Subscription? @relation(fields: [subscriptionId], references: [subscriptionId], onDelete: SetNull)
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionId])
  @@index([userId])
}
