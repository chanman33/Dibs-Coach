'use server';

import { cookies } from 'next/headers';
import { createServerClient } from '@supabase/ssr';
import { auth } from '@clerk/nextjs/server';
import { createZoomSession } from '../zoom/zoom-service';
import { handleZoomError } from '../zoom/middleware/zoom-error-handler';

// Initialize Supabase client
const getSupabase = async () => {
  const cookieStore = await cookies();
  
  return createServerClient(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options: any) {
          cookieStore.set({ name, value, ...options });
        },
        remove(name: string, options: any) {
          cookieStore.delete({ name, ...options });
        },
      },
    }
  );
};

interface CalendlyEventPayload {
  event: string;
  payload: {
    event_type: {
      name: string;
    };
    event: {
      uuid: string;
      start_time: string;
      end_time: string;
    };
    invitee: {
      email: string;
      name: string;
    };
  };
}

export async function handleCalendlyWebhook(payload: CalendlyEventPayload) {
  try {
    const supabase = await getSupabase();

    switch (payload.event) {
      case 'invitee.created': {
        // Create Calendly event record
        const { data: calendlyEvent, error: calendlyError } = await supabase
          .from('CalendlyEvent')
          .insert({
            eventUuid: payload.payload.event.uuid,
            status: 'scheduled',
            startTime: payload.payload.event.start_time,
            endTime: payload.payload.event.end_time,
            inviteeEmail: payload.payload.invitee.email,
            inviteeName: payload.payload.invitee.name,
            eventType: payload.payload.event_type.name,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          })
          .select()
          .single();

        if (calendlyError) throw calendlyError;

        // Create corresponding Zoom session
        const startTime = new Date(payload.payload.event.start_time);
        const endTime = new Date(payload.payload.event.end_time);
        const durationMinutes = Math.round((endTime.getTime() - startTime.getTime()) / (1000 * 60));

        const zoomSession = await createZoomSession({
          sessionName: `${payload.payload.event_type.name} with ${payload.payload.invitee.name}`,
          userName: 'Host', // Default host name
          sessionPasscode: '', // Will be generated by Zoom
          startTime: startTime.toISOString(),
          duration: durationMinutes
        });

        // Link Calendly event to Zoom session
        const { error: updateError } = await supabase
          .from('CalendlyEvent')
          .update({ 
            zoomSessionId: zoomSession.id,
            updatedAt: new Date().toISOString()
          })
          .eq('id', calendlyEvent.id);

        if (updateError) throw updateError;

        return { calendlyEvent, zoomSession };
      }

      case 'invitee.canceled': {
        // Get the Calendly event
        const { data: calendlyEvent, error: getError } = await supabase
          .from('CalendlyEvent')
          .select('*')
          .eq('eventUuid', payload.payload.event.uuid)
          .single();

        if (getError) throw getError;

        // Update Calendly event status
        const { error: updateError } = await supabase
          .from('CalendlyEvent')
          .update({ 
            status: 'canceled',
            updatedAt: new Date().toISOString()
          })
          .eq('id', calendlyEvent.id);

        if (updateError) throw updateError;

        // If there's a linked Zoom session, update its status
        if (calendlyEvent.zoomSessionId) {
          const { error: zoomError } = await supabase
            .from('ZoomSession')
            .update({ 
              status: 'canceled',
              updatedAt: new Date().toISOString()
            })
            .eq('id', calendlyEvent.zoomSessionId);

          if (zoomError) throw zoomError;
        }

        return { success: true };
      }

      default:
        console.warn(`Unhandled Calendly event type: ${payload.event}`);
        return { success: true };
    }
  } catch (error) {
    console.error('[CALENDLY_WEBHOOK_ERROR]', error);
    throw handleZoomError(error);
  }
}

export async function getUpcomingMeetings(userDbId: number) {
  try {
    const supabase = await getSupabase();

    const { data: meetings, error } = await supabase
      .from('CalendlyEvent')
      .select(`
        *,
        zoomSession (*)
      `)
      .eq('userDbId', userDbId)
      .eq('status', 'scheduled')
      .gte('startTime', new Date().toISOString())
      .order('startTime', { ascending: true });

    if (error) throw error;
    return meetings;
  } catch (error) {
    console.error('[GET_UPCOMING_MEETINGS_ERROR]', error);
    throw handleZoomError(error);
  }
}

export async function cancelMeeting(eventId: number) {
  try {
    const { userId } = await auth();
    if (!userId) throw new Error('Unauthorized');

    const supabase = await getSupabase();

    // Get the meeting details
    const { data: meeting, error: getError } = await supabase
      .from('CalendlyEvent')
      .select('*')
      .eq('id', eventId)
      .single();

    if (getError) throw getError;

    // Update Calendly event status
    const { error: updateError } = await supabase
      .from('CalendlyEvent')
      .update({ 
        status: 'canceled',
        updatedAt: new Date().toISOString()
      })
      .eq('id', eventId);

    if (updateError) throw updateError;

    // If there's a linked Zoom session, update its status
    if (meeting.zoomSessionId) {
      const { error: zoomError } = await supabase
        .from('ZoomSession')
        .update({ 
          status: 'canceled',
          updatedAt: new Date().toISOString()
        })
        .eq('id', meeting.zoomSessionId);

      if (zoomError) throw zoomError;
    }

    return { success: true };
  } catch (error) {
    console.error('[CANCEL_MEETING_ERROR]', error);
    throw handleZoomError(error);
  }
} 