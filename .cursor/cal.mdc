---
description: Cal.com API related tasks
globs: 
alwaysApply: false
---
# Cal.com Integration Guidelines

## Integration Model

We use the **Platform Managed Users** model for our Cal.com integration. This means:

1. We create and manage Cal.com Managed Users on behalf of our coaches
2. We maintain full control over the booking flow, availability, and calendar management
3. We don't require coaches to create their own Cal.com accounts
4. Always confirm Cal.com API success before modifying the local database

## Server/Client Architecture

### Server Components and Actions
1. **ALWAYS** use the `'use server'` directive for:
   - Token management
   - API calls with sensitive credentials
   - Database operations
   - Webhook handling
   ```typescript
   // Example server action
   'use server';
   export async function refreshCalToken(userUlid: string) {
     // Secure implementation
   }
   ```

2. **ALWAYS** place server-only code in:
   - `/app/api/` routes
   - `/utils/actions/` for server actions
   - Files marked with `'use server'`

3. **NEVER** import server actions directly in client components:
   ```typescript
   // ❌ WRONG - Direct import in client component
   import { refreshCalToken } from '@/utils/actions/cal-tokens';
   
   // ✅ CORRECT - Use through props or context
   function ClientComponent({ onRefreshToken }: { onRefreshToken: () => Promise<void> })
   ```

### Client Components
1. **NEVER** include sensitive credentials in client components:
   ```typescript
   // ❌ WRONG
   const clientSecret = process.env.CAL_CLIENT_SECRET;
   
   // ✅ CORRECT
   const publicClientId = process.env.NEXT_PUBLIC_CAL_CLIENT_ID;
   ```

2. **ALWAYS** use type-safe server actions for API calls:
   ```typescript
   // server-action.ts
   'use server';
   export async function getCalendarData(userUlid: string) {
     // Secure implementation
   }
   
   // client-component.tsx
   import { getCalendarData } from './server-action';
   ```

## Environment Setup

### Required Environment Variables
```typescript
CAL_CLIENT_ID=your_client_id
CAL_API_URL=https://api.cal.com/v2
CAL_CLIENT_SECRET=your_client_secret
```
Don't directly use CAL_CLIENT_SECRET or NEXT_PUBLIC_CAL_CLIENT_ID in your Authorization header.

Always dynamically retrieve the OAuth token (CAL_ACCESS_TOKEN) first, then use it in your API requests.

Ensure you always use the prefix Bearer with your token in the Authorization header.

## API Security

### Authentication Headers
1. **NEVER** include `CAL_CLIENT_SECRET` in client-side requests
2. **ALWAYS** use server actions or API routes for authenticated requests:
   ```typescript
   // api/cal/managed-users/route.ts
   export async function GET() {
     const headers = {
       'x-cal-client-id': env.NEXT_PUBLIC_CAL_CLIENT_ID,
       'x-cal-secret-key': env.CAL_CLIENT_SECRET
     };
     // Make secure request
   }
   ```

### Token Management
1. **ALWAYS** use the centralized token service:
   ```typescript
   // utils/auth/cal-token-service.ts
   'use server';
   export async function refreshCalAccessToken(userUlid: string) {
     // Secure implementation
   }
   ```

2. **NEVER** store tokens in client-side state or localStorage
3. **ALWAYS** use server-side token storage (Supabase)

## API Endpoint Rules

### For User Management Operations (Platform API)
- Used for creating, updating, and managing managed users
- Base URL: `https://api.cal.com/v2/oauth-clients/${clientId}/users`
- Headers:
  ```typescript
  headers: {
    'x-cal-client-id': env.CAL_CLIENT_ID,
    'x-cal-secret-key': env.CAL_CLIENT_SECRET
  }
  ```

## Data Flow Architecture

### Server-Side Operations
1. **ALWAYS** implement these operations as server actions or API routes:
   - Token refresh
   - Calendar operations
   - User management
   - Booking operations
   ```typescript
   // utils/actions/cal-booking.ts
   'use server';
   export async function createBooking(params: BookingParams) {
     // Secure implementation
   }
   ```

### Client-Side Operations
1. **ONLY** allow these operations in client components:
   - UI state management
   - Form handling
   - User interactions
   - Data display
   ```typescript
   // components/BookingForm.tsx
   'use client';
   export function BookingForm({ onSubmit }: { onSubmit: (data: FormData) => Promise<void> })
   ```

## Common Operations

### User Management
- Create managed user: `POST /v2/oauth-clients/${clientId}/users`
  ```typescript
  // Example request body
  {
    "email": "user@example.com",
    "timeZone": "America/New_York",
    "name": "User Name",
    "timeFormat": 12,
    "weekStart": "Sunday"
  }
  ```
- Get managed user: `GET /v2/oauth-clients/${clientId}/users/${managedUserId}`
- Force refresh token: `POST /v2/oauth-clients/${clientId}/users/${managedUserId}/force-refresh`

### Regular Operations (using access token)
- Create booking: `POST /v2/bookings`
- Get event types: `GET /v2/event-types`
- Get bookings: `GET /v2/bookings`
- Cancel booking: `DELETE /v2/bookings/${bookingId}`
- Reschedule booking: `POST /v2/bookings/${bookingId}/reschedule`

## API Utilities

### Server-Side Utilities
1. **ALWAYS** implement secure API utilities:
   ```typescript
   // utils/cal/server-api.ts
   'use server';
   export async function makeSecureCalApiRequest(endpoint: string, options: RequestOptions) {
     const headers = {
       'x-cal-client-id': env.NEXT_PUBLIC_CAL_CLIENT_ID,
       'x-cal-secret-key': env.CAL_CLIENT_SECRET
     };
     // Make secure request
   }
   ```

### Client-Side Utilities
1. **ALWAYS** use safe client utilities:
   ```typescript
   // utils/cal/client-api.ts
   export async function makeClientCalApiRequest(endpoint: string, accessToken: string) {
     const response = await fetch('/api/cal/proxy', {
       headers: {
         'Authorization': `Bearer ${accessToken}`
       }
     });
     return response.json();
   }
   ```

## Project Structure

### Library Structure
- `lib/cal/cal.ts`: Core configuration and utilities
- `lib/cal/cal-service.ts`: Primary service for Cal.com operations
- `lib/cal/cal-api.ts`: Client for direct API calls using OAuth tokens
- `lib/cal/cal-webhook.ts`: Webhook registration and management

### Server-Side Code Location
- `/app/api/` - API routes
- `/utils/actions/` - Server actions
- `/utils/auth/` - Authentication utilities
- `/lib/cal/server/` - Server-side Cal.com utilities

### Client-Side Code Location
- `/components/` - React components
- `/lib/cal/client/` - Client-safe Cal.com utilities
- `/hooks/` - React hooks

### API Endpoints
- `app/api/cal/webhooks/`: Webhook registration and event handling
- `app/api/cal/refresh-token/`: Token refresh endpoint
  ```typescript
  // Example refresh token endpoint
  export default async function handler(req, res) {
    const { authorization } = req.headers;
    const accessToken = authorization?.split(" ")[1];
    
    // Get user from database using access token
    const user = await getUserByAccessToken(accessToken);
    
    // Refresh the token
    const response = await fetch(`${process.env.CAL_API_URL}/oauth/${process.env.CAL_CLIENT_ID}/refresh`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        refreshToken: user.calRefreshToken,
      }),
    });
    
    const data = await response.json();
    
    // Update tokens in database
    await updateUserTokens(user.id, {
      calAccessToken: data.accessToken,
      calRefreshToken: data.refreshToken,
    });
    
    return res.json({ accessToken: data.accessToken });
  }
  ```
- `app/api/cal/bookings/`: Booking management endpoints
- `app/api/cal/test/`: Testing endpoints

## Error Handling

### Server-Side Errors
1. **NEVER** expose sensitive error details to clients
2. **ALWAYS** log detailed errors server-side:
   ```typescript
   // server-action.ts
   'use server';
   try {
     // Operation
   } catch (error) {
     console.error('[CAL_ERROR]', {
       context: 'OPERATION_NAME',
       error,
       timestamp: new Date().toISOString()
     });
     throw new Error('Operation failed'); // Safe error for client
   }
   ```

### Client-Side Errors
1. **ALWAYS** handle errors gracefully in UI
2. **NEVER** display raw error messages from server

## Authentication Rules

### For Managed User API Endpoints (Platform API)
- **ALWAYS** use the following headers:
  ```typescript
  headers: {
    'x-cal-client-id': env.CAL_CLIENT_ID,
    'x-cal-secret-key': env.CAL_CLIENT_SECRET
  }
  ```

- **ALWAYS** use the following API URL pattern:
  ```
  https://api.cal.com/v2/...
  ```

## Token Management

1. **ALWAYS** use the centralized token refresh service in `utils/auth/token-service.ts`
2. **NEVER** implement token refresh directly in components
3. **ALWAYS** handle token expiration errors with automatic refresh attempts
4. **ALWAYS** store tokens in Supabase database:
   ```sql
   -- Example schema
   ALTER TABLE users ADD COLUMN cal_access_token TEXT;
   ALTER TABLE users ADD COLUMN cal_refresh_token TEXT;
   ALTER TABLE users ADD COLUMN cal_user_id INTEGER;
   ```

## API Version

1. **ALWAYS** include the Cal.com API version header:
   ```typescript
   'cal-api-version': '2024-01-01'
   ```

## Managed User Operations

### Creating Managed Users
1. **ALWAYS** use the `calService.createManagedUser()` function
2. **ALWAYS** store both the managed user ID and credentials
3. **ALWAYS** set timezone for proper availability management

### Event Types
1. **ALWAYS** use the platform API endpoint for managed users
2. **ALWAYS** use the client ID and secret key authentication
3. **ALWAYS** handle timezone conversions properly

### Bookings
1. **ALWAYS** use the OAuth token when creating bookings for a managed user
2. **ALWAYS** include proper error handling and logging
3. **ALWAYS** validate timezone settings

## Webhook Management

1. **ALWAYS** use the `calWebhookService` for webhook management
2. **ALWAYS** verify webhook signatures for security
3. **NEVER** expose the webhook secret in client-side code

## Testing

### Server Component Tests
1. **ALWAYS** test server actions in isolation
2. **ALWAYS** mock sensitive credentials in tests

### Client Component Tests
1. **ALWAYS** mock server actions in client tests
2. **NEVER** include real credentials in client tests

## Migration Guide

1. Move all API calls to server actions
2. Remove client-side credential usage
3. Update components to use server actions
4. Implement proper error boundaries
5. Add type safety between client/server boundaries

## Common Mistakes to Avoid

1. **NEVER** mix server and client code
2. **NEVER** expose sensitive credentials to client
3. **NEVER** make direct API calls from client components
4. **ALWAYS** use proper server/client boundaries
5. **ALWAYS** implement proper error handling
6. **NEVER** mix authentication methods (don't use OAuth tokens for platform endpoints)
7. **NEVER** use the v1 API endpoints - always use v2
8. **NEVER** store credentials in local state
9. **AVOID** direct API calls in components - use service functions instead
10. **NEVER** ignore timezone settings
11. **NEVER** skip token refresh implementation

## Booking Integration Flow

1. Coach calendars are created and managed via managed users
2. Event types are retrieved and displayed to clients
3. Bookings are created in Cal.com using the managed user's credentials